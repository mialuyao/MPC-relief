{
    "sourceFile": "draw.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 268,
            "patches": [
                {
                    "date": 1720341558122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720341576798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,31 @@\n-# Plot the function with annotated points\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+# Define the piecewise function\n+def piecewise_function(x, t_eq, t_diff):\n+    if x < t_eq:\n+        return 0\n+    elif x > t_diff:\n+        return 1\n+    else:\n+        return (x - t_eq) / (t_diff - t_eq)\n+\n+# Parameters\n+t_eq = 2\n+t_diff = 5\n+\n+# Create x values\n+x_values = np.linspace(0, 7, 400)\n+y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# Plot the function\n plt.figure(figsize=(10, 6))\n plt.plot(x_values, y_values, label='Piecewise Function')\n plt.axvline(t_eq, color='red', linestyle='--', label=f'$t_{{eq}} = {t_eq}$')\n plt.axvline(t_diff, color='blue', linestyle='--', label=f'$t_{{diff}} = {t_diff}$')\n-plt.axhline(1, color='green', linestyle='--', label='$y = 1$')\n-\n-# Annotate the points\n-plt.annotate(f'$t_{{eq}} = {t_eq}$', xy=(t_eq, 0), xytext=(t_eq, 0.3),\n-             arrowprops=dict(facecolor='black', shrink=0.05),\n-             horizontalalignment='right', verticalalignment='top')\n-plt.annotate(f'$t_{{diff}} = {t_diff}$', xy=(t_diff, 1), xytext=(t_diff, 0.7),\n-             arrowprops=dict(facecolor='black', shrink=0.05),\n-             horizontalalignment='right', verticalalignment='top')\n-plt.annotate('$y = 1$', xy=(0, 1), xytext=(0.5, 1.05),\n-             arrowprops=dict(facecolor='black', shrink=0.05),\n-             horizontalalignment='right', verticalalignment='top')\n-\n plt.xlabel('x')\n plt.ylabel('y')\n-plt.title('Piecewise Function Plot with Annotations')\n+plt.title('Piecewise Function Plot')\n plt.legend()\n plt.grid(True)\n plt.show()\n"
                },
                {
                    "date": 1720341617148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,4 +28,30 @@\n plt.title('Piecewise Function Plot')\n plt.legend()\n plt.grid(True)\n plt.show()\n+\n+\n+# Plot the function with annotated points\n+plt.figure(figsize=(10, 6))\n+plt.plot(x_values, y_values, label='Piecewise Function')\n+plt.axvline(t_eq, color='red', linestyle='--', label=f'$t_{{eq}} = {t_eq}$')\n+plt.axvline(t_diff, color='blue', linestyle='--', label=f'$t_{{diff}} = {t_diff}$')\n+plt.axhline(1, color='green', linestyle='--', label='$y = 1$')\n+\n+# Annotate the points\n+plt.annotate(f'$t_{{eq}} = {t_eq}$', xy=(t_eq, 0), xytext=(t_eq, 0.3),\n+             arrowprops=dict(facecolor='black', shrink=0.05),\n+             horizontalalignment='right', verticalalignment='top')\n+plt.annotate(f'$t_{{diff}} = {t_diff}$', xy=(t_diff, 1), xytext=(t_diff, 0.7),\n+             arrowprops=dict(facecolor='black', shrink=0.05),\n+             horizontalalignment='right', verticalalignment='top')\n+plt.annotate('$y = 1$', xy=(0, 1), xytext=(0.5, 1.05),\n+             arrowprops=dict(facecolor='black', shrink=0.05),\n+             horizontalalignment='right', verticalalignment='top')\n+\n+plt.xlabel('x')\n+plt.ylabel('y')\n+plt.title('Piecewise Function Plot with Annotations')\n+plt.legend()\n+plt.grid(True)\n+plt.show()\n"
                },
                {
                    "date": 1720341743875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,41 +17,21 @@\n # Create x values\n x_values = np.linspace(0, 7, 400)\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n-# Plot the function\n+# Plot the function with specific annotations on axes\n plt.figure(figsize=(10, 6))\n plt.plot(x_values, y_values, label='Piecewise Function')\n-plt.axvline(t_eq, color='red', linestyle='--', label=f'$t_{{eq}} = {t_eq}$')\n-plt.axvline(t_diff, color='blue', linestyle='--', label=f'$t_{{diff}} = {t_diff}$')\n-plt.xlabel('x')\n-plt.ylabel('y')\n-plt.title('Piecewise Function Plot')\n-plt.legend()\n-plt.grid(True)\n-plt.show()\n+plt.axvline(t_eq, color='red', linestyle='--')\n+plt.axvline(t_diff, color='blue', linestyle='--')\n+plt.axhline(1, color='green', linestyle='--')\n \n+# Annotate the axes\n+plt.xticks([t_eq, t_diff], ['$t_{eq}$', '$t_{diff}$'])\n+plt.yticks([0, 1], ['0', '1'])\n \n-# Plot the function with annotated points\n-plt.figure(figsize=(10, 6))\n-plt.plot(x_values, y_values, label='Piecewise Function')\n-plt.axvline(t_eq, color='red', linestyle='--', label=f'$t_{{eq}} = {t_eq}$')\n-plt.axvline(t_diff, color='blue', linestyle='--', label=f'$t_{{diff}} = {t_diff}$')\n-plt.axhline(1, color='green', linestyle='--', label='$y = 1$')\n-\n-# Annotate the points\n-plt.annotate(f'$t_{{eq}} = {t_eq}$', xy=(t_eq, 0), xytext=(t_eq, 0.3),\n-             arrowprops=dict(facecolor='black', shrink=0.05),\n-             horizontalalignment='right', verticalalignment='top')\n-plt.annotate(f'$t_{{diff}} = {t_diff}$', xy=(t_diff, 1), xytext=(t_diff, 0.7),\n-             arrowprops=dict(facecolor='black', shrink=0.05),\n-             horizontalalignment='right', verticalalignment='top')\n-plt.annotate('$y = 1$', xy=(0, 1), xytext=(0.5, 1.05),\n-             arrowprops=dict(facecolor='black', shrink=0.05),\n-             horizontalalignment='right', verticalalignment='top')\n-\n plt.xlabel('x')\n plt.ylabel('y')\n-plt.title('Piecewise Function Plot with Annotations')\n+plt.title('Piecewise Function Plot with Axis Annotations')\n plt.legend()\n plt.grid(True)\n plt.show()\n"
                },
                {
                    "date": 1720341923141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n # Create x values\n x_values = np.linspace(0, 7, 400)\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n-# Plot the function with specific annotations on axes\n+# Plot the function with axis arrows and specific annotations\n plt.figure(figsize=(10, 6))\n plt.plot(x_values, y_values, label='Piecewise Function')\n plt.axvline(t_eq, color='red', linestyle='--')\n plt.axvline(t_diff, color='blue', linestyle='--')\n@@ -28,10 +28,20 @@\n # Annotate the axes\n plt.xticks([t_eq, t_diff], ['$t_{eq}$', '$t_{diff}$'])\n plt.yticks([0, 1], ['0', '1'])\n \n+# Drawing axis arrows\n+plt.axhline(0, color='black',linewidth=1.3)\n+plt.axvline(0, color='black',linewidth=1.3)\n+\n+plt.annotate('', xy=(7.5, 0), xytext=(0, 0),\n+             arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n+plt.annotate('', xy=(0, 1.1), xytext=(0, 0),\n+             arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n+\n plt.xlabel('x')\n plt.ylabel('y')\n-plt.title('Piecewise Function Plot with Axis Annotations')\n+plt.title('Piecewise Function Plot with Axis Annotations and Arrows')\n plt.legend()\n plt.grid(True)\n plt.show()\n+\n"
                },
                {
                    "date": 1720342099847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,31 +17,38 @@\n # Create x values\n x_values = np.linspace(0, 7, 400)\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n-# Plot the function with axis arrows and specific annotations\n-plt.figure(figsize=(10, 6))\n-plt.plot(x_values, y_values, label='Piecewise Function')\n-plt.axvline(t_eq, color='red', linestyle='--')\n-plt.axvline(t_diff, color='blue', linestyle='--')\n-plt.axhline(1, color='green', linestyle='--')\n+# Plot the function with axis arrows and specific annotations, removing the outer frame\n+fig, ax = plt.subplots(figsize=(10, 6))\n+ax.plot(x_values, y_values, label='Piecewise Function')\n+ax.axvline(t_eq, color='red', linestyle='--')\n+ax.axvline(t_diff, color='blue', linestyle='--')\n+ax.axhline(1, color='green', linestyle='--')\n \n # Annotate the axes\n-plt.xticks([t_eq, t_diff], ['$t_{eq}$', '$t_{diff}$'])\n-plt.yticks([0, 1], ['0', '1'])\n+ax.set_xticks([t_eq, t_diff])\n+ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+ax.set_yticks([0, 1])\n+ax.set_yticklabels(['0', '1'])\n \n+# Remove the top and right spines\n+ax.spines['top'].set_visible(False)\n+ax.spines['right'].set_visible(False)\n+ax.spines['left'].set_position('zero')\n+ax.spines['bottom'].set_position('zero')\n+\n # Drawing axis arrows\n-plt.axhline(0, color='black',linewidth=1.3)\n-plt.axvline(0, color='black',linewidth=1.3)\n+ax.annotate('', xy=(7.5, 0), xytext=(0, 0),\n+            arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n+ax.annotate('', xy=(0, 1.2), xytext=(0, 0),\n+            arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n \n-plt.annotate('', xy=(7.5, 0), xytext=(0, 0),\n-             arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n-plt.annotate('', xy=(0, 1.1), xytext=(0, 0),\n-             arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n+ax.set_xlabel('x')\n+ax.set_ylabel('y')\n+ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+ax.legend()\n+ax.grid(True)\n \n-plt.xlabel('x')\n-plt.ylabel('y')\n-plt.title('Piecewise Function Plot with Axis Annotations and Arrows')\n-plt.legend()\n-plt.grid(True)\n plt.show()\n \n+\n"
                },
                {
                    "date": 1720342110461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n \n ax.set_xlabel('x')\n ax.set_ylabel('y')\n ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-ax.legend()\n+# ax.legend()\n ax.grid(True)\n \n plt.show()\n \n"
                },
                {
                    "date": 1720342482367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n # Create x values\n x_values = np.linspace(0, 7, 400)\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n-# Plot the function with axis arrows and specific annotations, removing the outer frame\n+# Plot the function with axis arrows and specific annotations, removing the outer frame and adding axis labels\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function')\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n@@ -42,13 +42,18 @@\n             arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n ax.annotate('', xy=(0, 1.2), xytext=(0, 0),\n             arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n \n+# Adding axis labels\n+ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n ax.set_xlabel('x')\n ax.set_ylabel('y')\n ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# ax.legend()\n+ax.legend()\n ax.grid(True)\n \n plt.show()\n \n \n+\n"
                },
                {
                    "date": 1720342504190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,10 @@\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-ax.set_yticks([0, 1])\n-ax.set_yticklabels(['0', '1'])\n+# ax.set_yticks([0, 1])\n+# ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n"
                },
                {
                    "date": 1720342521134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n+ax.set_yticks([0, 1])\n # ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n"
                },
                {
                    "date": 1720342536004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function')\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n-ax.axhline(1, color='green', linestyle='--')\n+# ax.axhline(1, color='green', linestyle='--')\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n"
                },
                {
                    "date": 1720342548720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-ax.set_yticks([0, 1])\n+ax.set_yticks([0])\n # ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n"
                },
                {
                    "date": 1720342557762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-ax.set_yticks([0])\n+ax.set_yticks([0, 1])\n # ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n"
                },
                {
                    "date": 1720342582306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n ax.set_yticks([0, 1])\n-# ax.set_yticklabels(['0', '1'])\n+ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n@@ -49,9 +49,9 @@\n \n ax.set_xlabel('x')\n ax.set_ylabel('y')\n ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-ax.legend()\n+# ax.legend()\n ax.grid(True)\n \n plt.show()\n \n"
                },
                {
                    "date": 1720342602967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,10 @@\n ax.annotate('', xy=(0, 1.2), xytext=(0, 0),\n             arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n \n # Adding axis labels\n-ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=15, color='black')\n+ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=15, color='black')\n \n ax.set_xlabel('x')\n ax.set_ylabel('y')\n ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n"
                },
                {
                    "date": 1720342632932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n ax.annotate('', xy=(0, 1.2), xytext=(0, 0),\n             arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n \n # Adding axis labels\n-ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=15, color='black')\n+ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=15, arrowstyle=\"->\"， color='black')\n ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=15, color='black')\n \n ax.set_xlabel('x')\n ax.set_ylabel('y')\n"
                },
                {
                    "date": 1720342638164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+# Define the piecewise function\n+def piecewise_function(x, t_eq, t_diff):\n+    if x < t_eq:\n+        return 0\n+    elif x > t_diff:\n+        return 1\n+    else:\n+        return (x - t_eq) / (t_diff - t_eq)\n+\n+# Parameters\n+t_eq = 2\n+t_diff = 5\n+\n+# Create x values\n+x_values = np.linspace(0, 7, 400)\n+y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# Plot the function with axis arrows and specific annotations, removing the outer frame and adding axis labels\n+fig, ax = plt.subplots(figsize=(10, 6))\n+ax.plot(x_values, y_values, label='Piecewise Function')\n+ax.axvline(t_eq, color='red', linestyle='--')\n+ax.axvline(t_diff, color='blue', linestyle='--')\n+# ax.axhline(1, color='green', linestyle='--')\n+\n+# Annotate the axes\n+ax.set_xticks([t_eq, t_diff])\n+ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+ax.set_yticks([0, 1])\n+ax.set_yticklabels(['0', '1'])\n+\n+# Remove the top and right spines\n+ax.spines['top'].set_visible(False)\n+ax.spines['right'].set_visible(False)\n+ax.spines['left'].set_position('zero')\n+ax.spines['bottom'].set_position('zero')\n+\n+# Drawing axis arrows\n+ax.annotate('', xy=(7.5, 0), xytext=(0, 0),\n+            arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n+ax.annotate('', xy=(0, 1.2), xytext=(0, 0),\n+            arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n+\n+# Adding axis labels\n+ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=15, arrowstyle=\"->\", color='black')\n+ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=15, arrowstyle=\"->\", color='black')\n+\n+ax.set_xlabel('x')\n+ax.set_ylabel('y')\n+ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# ax.legend()\n+ax.grid(True)\n+\n+plt.show()\n+\n+\n+\n"
                },
                {
                    "date": 1720342645397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,68 +43,9 @@\n ax.annotate('', xy=(0, 1.2), xytext=(0, 0),\n             arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n \n # Adding axis labels\n-ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=15, arrowstyle=\"->\", color='black')\n-ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=15, arrowstyle=\"->\", color='black')\n-\n-ax.set_xlabel('x')\n-ax.set_ylabel('y')\n-ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# ax.legend()\n-ax.grid(True)\n-\n-plt.show()\n-\n-\n-\n-import numpy as np\n-import matplotlib.pyplot as plt\n-\n-# Define the piecewise function\n-def piecewise_function(x, t_eq, t_diff):\n-    if x < t_eq:\n-        return 0\n-    elif x > t_diff:\n-        return 1\n-    else:\n-        return (x - t_eq) / (t_diff - t_eq)\n-\n-# Parameters\n-t_eq = 2\n-t_diff = 5\n-\n-# Create x values\n-x_values = np.linspace(0, 7, 400)\n-y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# Plot the function with axis arrows and specific annotations, removing the outer frame and adding axis labels\n-fig, ax = plt.subplots(figsize=(10, 6))\n-ax.plot(x_values, y_values, label='Piecewise Function')\n-ax.axvline(t_eq, color='red', linestyle='--')\n-ax.axvline(t_diff, color='blue', linestyle='--')\n-# ax.axhline(1, color='green', linestyle='--')\n-\n-# Annotate the axes\n-ax.set_xticks([t_eq, t_diff])\n-ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-ax.set_yticks([0, 1])\n-ax.set_yticklabels(['0', '1'])\n-\n-# Remove the top and right spines\n-ax.spines['top'].set_visible(False)\n-ax.spines['right'].set_visible(False)\n-ax.spines['left'].set_position('zero')\n-ax.spines['bottom'].set_position('zero')\n-\n-# Drawing axis arrows\n-ax.annotate('', xy=(7.5, 0), xytext=(0, 0),\n-            arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n-ax.annotate('', xy=(0, 1.2), xytext=(0, 0),\n-            arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n-\n-# Adding axis labels\n-ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=15, arrowstyle=\"->\"， color='black')\n+ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=15, color='black')\n ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=15, color='black')\n \n ax.set_xlabel('x')\n ax.set_ylabel('y')\n"
                },
                {
                    "date": 1720342744009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n ax.spines['left'].set_position('zero')\n ax.spines['bottom'].set_position('zero')\n+ax.axis[\"left\"].set_axisline_style(\"->\", size = 1.5)\n \n # Drawing axis arrows\n ax.annotate('', xy=(7.5, 0), xytext=(0, 0),\n             arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n"
                },
                {
                    "date": 1720342754859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n ax.spines['left'].set_position('zero')\n-ax.spines['bottom'].set_position('zero')\n+ax.spines['bottom'].set_axisline_style(\"->\", size = 1.5)\n ax.axis[\"left\"].set_axisline_style(\"->\", size = 1.5)\n \n # Drawing axis arrows\n ax.annotate('', xy=(7.5, 0), xytext=(0, 0),\n"
                },
                {
                    "date": 1720342763136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n ax.spines['left'].set_position('zero')\n-ax.spines['bottom'].set_axisline_style(\"->\", size = 1.5)\n+ax.spines['bottom'].set_axisline_style(\"->\",'zero', size = 1.5)\n ax.axis[\"left\"].set_axisline_style(\"->\", size = 1.5)\n \n # Drawing axis arrows\n ax.annotate('', xy=(7.5, 0), xytext=(0, 0),\n"
                },
                {
                    "date": 1720342770067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,10 @@\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n-ax.spines['left'].set_position('zero')\n-ax.spines['bottom'].set_axisline_style(\"->\",'zero', size = 1.5)\n+ax.spines['left'].set_axisline_style(\"->\",'zero',size = 1.5)\n+ax.spines['bottom'].set_axisline_style(\"->\",'zero',size = 1.5)\n ax.axis[\"left\"].set_axisline_style(\"->\", size = 1.5)\n \n # Drawing axis arrows\n ax.annotate('', xy=(7.5, 0), xytext=(0, 0),\n"
                },
                {
                    "date": 1720342788454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,9 @@\n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n ax.spines['left'].set_axisline_style(\"->\",'zero',size = 1.5)\n-ax.spines['bottom'].set_axisline_style(\"->\",'zero',size = 1.5)\n-ax.axis[\"left\"].set_axisline_style(\"->\", size = 1.5)\n+ax.axis()['bottom'].set_axisline_style(\"->\",'zero',size = 1.5)\n \n # Drawing axis arrows\n ax.annotate('', xy=(7.5, 0), xytext=(0, 0),\n             arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n"
                },
                {
                    "date": 1720342793608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,10 @@\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n-ax.spines['left'].set_axisline_style(\"->\",'zero',size = 1.5)\n-ax.axis()['bottom'].set_axisline_style(\"->\",'zero',size = 1.5)\n+ax.axis['left'].set_axisline_style(\"->\",'zero',size = 1.5)\n+ax.axis['bottom'].set_axisline_style(\"->\",'zero',size = 1.5)\n \n # Drawing axis arrows\n ax.annotate('', xy=(7.5, 0), xytext=(0, 0),\n             arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n"
                },
                {
                    "date": 1720342823836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import numpy as np\n import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n \n # Define the piecewise function\n def piecewise_function(x, t_eq, t_diff):\n     if x < t_eq:\n"
                },
                {
                    "date": 1720342852068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,14 +18,14 @@\n # Create x values\n x_values = np.linspace(0, 7, 400)\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n-# Plot the function with axis arrows and specific annotations, removing the outer frame and adding axis labels\n+# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function')\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n-# ax.axhline(1, color='green', linestyle='--')\n+ax.axhline(1, color='green', linestyle='--')\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n@@ -34,27 +34,23 @@\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n-ax.axis['left'].set_axisline_style(\"->\",'zero',size = 1.5)\n-ax.axis['bottom'].set_axisline_style(\"->\",'zero',size = 1.5)\n+ax.spines['left'].set_position('zero')\n+ax.spines['bottom'].set_position('zero')\n \n-# Drawing axis arrows\n-ax.annotate('', xy=(7.5, 0), xytext=(0, 0),\n-            arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n-ax.annotate('', xy=(0, 1.2), xytext=(0, 0),\n-            arrowprops=dict(arrowstyle=\"->\", color='black', linewidth=1.3))\n+# Drawing axis arrows by extending spines\n+arrow_fmt = dict(markersize=4, color='black', linewidth=1.3)\n+ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n # Adding axis labels\n-ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=15, color='black')\n-ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=15, color='black')\n+ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n ax.set_xlabel('x')\n ax.set_ylabel('y')\n ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# ax.legend()\n+ax.legend()\n ax.grid(True)\n \n plt.show()\n-\n-\n-\n"
                },
                {
                    "date": 1720342866479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n ax.set_xlabel('x')\n ax.set_ylabel('y')\n-ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n ax.legend()\n ax.grid(True)\n \n plt.show()\n"
                },
                {
                    "date": 1720342886656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,11 +46,11 @@\n # Adding axis labels\n ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n-ax.set_xlabel('x')\n+ax.set_xlabel('d')\n ax.set_ylabel('y')\n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-ax.legend()\n+# ax.legend()\n ax.grid(True)\n \n plt.show()\n"
                },
                {
                    "date": 1720342909022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n ax.set_xlabel('d')\n-ax.set_ylabel('y')\n+ax.set_ylabel('diff')\n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n # ax.legend()\n ax.grid(True)\n \n"
                },
                {
                    "date": 1720342916928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,10 @@\n ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n # Adding axis labels\n-ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+ax.text(7.6, -0.05, 'd', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.1, 1.25, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n ax.set_xlabel('d')\n ax.set_ylabel('diff')\n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n"
                },
                {
                    "date": 1720342959385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function')\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n-ax.axhline(1, color='green', linestyle='--')\n+# ax.axhline(1, color='green', linestyle='--')\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n"
                },
                {
                    "date": 1720342971839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n ax.set_yticks([0, 1])\n-ax.set_yticklabels(['0', '1'])\n+ax.set_yticklabels(['0'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n"
                },
                {
                    "date": 1720342979284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n ax.set_yticks([0, 1])\n-ax.set_yticklabels(['0'])\n+ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n"
                },
                {
                    "date": 1720342989951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n ax.set_yticks([0, 1])\n-ax.set_yticklabels(['0', '1'])\n+# ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n"
                },
                {
                    "date": 1720343040210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n # Adding axis labels\n ax.text(7.6, -0.05, 'd', ha='center', va='center', fontsize=12, color='black')\n ax.text(-0.1, 1.25, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n-ax.set_xlabel('d')\n+ax.set_xlabel('x')\n ax.set_ylabel('diff')\n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n # ax.legend()\n ax.grid(True)\n"
                },
                {
                    "date": 1720343056895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n # Adding axis labels\n-ax.text(7.6, -0.05, 'd', ha='center', va='center', fontsize=12, color='black')\n+ax.text(7.6, -0.05,  ha='center', va='center', fontsize=12, color='black')\n ax.text(-0.1, 1.25, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n ax.set_xlabel('x')\n ax.set_ylabel('diff')\n"
                },
                {
                    "date": 1720343070312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n # Adding axis labels\n-ax.text(7.6, -0.05,  ha='center', va='center', fontsize=12, color='black')\n+ax.text(7.6, -0.05, 'd', ha='center', va='center', fontsize=12, color='black')\n ax.text(-0.1, 1.25, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n ax.set_xlabel('x')\n ax.set_ylabel('diff')\n"
                },
                {
                    "date": 1720343166186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,13 +43,13 @@\n ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n # Adding axis labels\n-ax.text(7.6, -0.05, 'd', ha='center', va='center', fontsize=12, color='black')\n+ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n ax.text(-0.1, 1.25, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n-ax.set_xlabel('x')\n-ax.set_ylabel('diff')\n+# ax.set_xlabel('x')\n+# ax.set_ylabel('diff')\n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n # ax.legend()\n ax.grid(True)\n \n"
                },
                {
                    "date": 1720343178579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,12 +44,12 @@\n ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n # Adding axis labels\n ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.1, 1.25, 'diff', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n-# ax.set_xlabel('x')\n-# ax.set_ylabel('diff')\n+ax.set_xlabel('x')\n+ax.set_ylabel('diff')\n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n # ax.legend()\n ax.grid(True)\n \n"
                },
                {
                    "date": 1720343195035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,20 +18,20 @@\n # Create x values\n x_values = np.linspace(0, 7, 400)\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n-# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes\n+# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and removing extra lines\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function')\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n-# ax.axhline(1, color='green', linestyle='--')\n+ax.axhline(1, color='green', linestyle='--')\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n ax.set_yticks([0, 1])\n-# ax.set_yticklabels(['0', '1'])\n+ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n@@ -46,11 +46,14 @@\n # Adding axis labels\n ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n-ax.set_xlabel('x')\n-ax.set_ylabel('diff')\n-# ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# ax.legend()\n+# Remove the extra lines on y=0 and y=1\n+ax.hlines(0, 0, 0, colors='none')\n+ax.hlines(1, 0, 0, colors='none')\n+\n+ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+ax.legend()\n ax.grid(True)\n \n plt.show()\n+\n"
                },
                {
                    "date": 1720343268778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n # Create x values\n x_values = np.linspace(0, 7, 400)\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n-# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and removing extra lines\n+# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adding parameter names\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function')\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n@@ -46,8 +46,12 @@\n # Adding axis labels\n ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n+# Add parameter names\n+ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+\n # Remove the extra lines on y=0 and y=1\n ax.hlines(0, 0, 0, colors='none')\n ax.hlines(1, 0, 0, colors='none')\n \n@@ -56,4 +60,5 @@\n ax.grid(True)\n \n plt.show()\n \n+\n"
                },
                {
                    "date": 1720343280957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,11 +42,11 @@\n arrow_fmt = dict(markersize=4, color='black', linewidth=1.3)\n ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n-# Adding axis labels\n-ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+# # Adding axis labels\n+# ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n"
                },
                {
                    "date": 1720343290166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,10 +54,10 @@\n # Remove the extra lines on y=0 and y=1\n ax.hlines(0, 0, 0, colors='none')\n ax.hlines(1, 0, 0, colors='none')\n \n-ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-ax.legend()\n+# ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# ax.legend()\n ax.grid(True)\n \n plt.show()\n \n"
                },
                {
                    "date": 1720343336354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n-ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+ax.text(3.5, -0.1, 'd', ha='left', va='center', fontsize=12, color='black')\n ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n # Remove the extra lines on y=0 and y=1\n ax.hlines(0, 0, 0, colors='none')\n"
                },
                {
                    "date": 1720343344393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n ax.text(3.5, -0.1, 'd', ha='left', va='center', fontsize=12, color='black')\n-ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.3, 0.5, 'diff', ha='center', va='upper', fontsize=12, color='black')\n \n # Remove the extra lines on y=0 and y=1\n ax.hlines(0, 0, 0, colors='none')\n ax.hlines(1, 0, 0, colors='none')\n"
                },
                {
                    "date": 1720343357492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n ax.text(3.5, -0.1, 'd', ha='left', va='center', fontsize=12, color='black')\n-ax.text(-0.3, 0.5, 'diff', ha='center', va='upper', fontsize=12, color='black')\n+ax.text(-0.3, 0.5, 'diff', ha='center', va='to p', fontsize=12, color='black')\n \n # Remove the extra lines on y=0 and y=1\n ax.hlines(0, 0, 0, colors='none')\n ax.hlines(1, 0, 0, colors='none')\n"
                },
                {
                    "date": 1720343414410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adding parameter names\n fig, ax = plt.subplots(figsize=(10, 6))\n-ax.plot(x_values, y_values, label='Piecewise Function')\n+ax.plot(x_values, y_values, label='Piecewise Function', line)\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n ax.axhline(1, color='green', linestyle='--')\n \n@@ -48,9 +48,9 @@\n # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n ax.text(3.5, -0.1, 'd', ha='left', va='center', fontsize=12, color='black')\n-ax.text(-0.3, 0.5, 'diff', ha='center', va='to p', fontsize=12, color='black')\n+ax.text(-0.3, 0.5, 'diff', ha='center', va='top', fontsize=12, color='black')\n \n # Remove the extra lines on y=0 and y=1\n ax.hlines(0, 0, 0, colors='none')\n ax.hlines(1, 0, 0, colors='none')\n"
                },
                {
                    "date": 1720343438537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adding parameter names\n fig, ax = plt.subplots(figsize=(10, 6))\n-ax.plot(x_values, y_values, label='Piecewise Function', line)\n-ax.axvline(t_eq, color='red', linestyle='--')\n+ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)\n+ax.axvline(t_eq, color='gray', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n ax.axhline(1, color='green', linestyle='--')\n \n # Annotate the axes\n"
                },
                {
                    "date": 1720343447043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adding parameter names\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)\n ax.axvline(t_eq, color='gray', linestyle='--')\n-ax.axvline(t_diff, color='blue', linestyle='--')\n+ax.axvline(t_diff, color='gary', linestyle='--')\n ax.axhline(1, color='green', linestyle='--')\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n"
                },
                {
                    "date": 1720343460743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,10 @@\n \n # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adding parameter names\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)\n-ax.axvline(t_eq, color='gray', linestyle='--')\n-ax.axvline(t_diff, color='gary', linestyle='--')\n+ax.axvline(t_eq, color='red', linestyle='--')\n+ax.axvline(t_diff, color='blue', linestyle='--')\n ax.axhline(1, color='green', linestyle='--')\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n"
                },
                {
                    "date": 1720343476494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-ax.set_yticks([0, 1])\n+# ax.set_yticks([0, 1])\n ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n"
                },
                {
                    "date": 1720343483694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,15 +23,15 @@\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n-ax.axhline(1, color='green', linestyle='--')\n+# ax.axhline(1, color='green', linestyle='--')\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n # ax.set_yticks([0, 1])\n-ax.set_yticklabels(['0', '1'])\n+# ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n"
                },
                {
                    "date": 1720343500821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n ax.hlines(1, 0, 0, colors='none')\n \n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n # ax.legend()\n-ax.grid(True)\n+# ax.grid(True)\n \n plt.show()\n \n \n"
                },
                {
                    "date": 1720343513301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n+ax.set_yticks([0, 1])\n # ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n"
                },
                {
                    "date": 1720343599123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,14 +24,16 @@\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n # ax.axhline(1, color='green', linestyle='--')\n+ax.axhline(1, color='green', linestyle='--', linewidth=2, xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n+ax.axhline(0, color='black', linewidth=2, xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n ax.set_yticks([0, 1])\n-# ax.set_yticklabels(['0', '1'])\n+ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n"
                },
                {
                    "date": 1720343620047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,14 +18,13 @@\n # Create x values\n x_values = np.linspace(0, 7, 400)\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n-# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adding parameter names\n+# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n fig, ax = plt.subplots(figsize=(10, 6))\n-ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)\n-ax.axvline(t_eq, color='red', linestyle='--')\n-ax.axvline(t_diff, color='blue', linestyle='--')\n-# ax.axhline(1, color='green', linestyle='--')\n+ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n+ax.axvline(t_eq, color='red', linestyle='--', linewidth=2)\n+ax.axvline(t_diff, color='blue', linestyle='--', linewidth=2)\n ax.axhline(1, color='green', linestyle='--', linewidth=2, xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n ax.axhline(0, color='black', linewidth=2, xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n \n # Annotate the axes\n@@ -40,27 +39,22 @@\n ax.spines['left'].set_position('zero')\n ax.spines['bottom'].set_position('zero')\n \n # Drawing axis arrows by extending spines\n-arrow_fmt = dict(markersize=4, color='black', linewidth=1.3)\n+arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n-# # Adding axis labels\n-# ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+# Adding axis labels\n+ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n-ax.text(3.5, -0.1, 'd', ha='left', va='center', fontsize=12, color='black')\n-ax.text(-0.3, 0.5, 'diff', ha='center', va='top', fontsize=12, color='black')\n+ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n-# Remove the extra lines on y=0 and y=1\n-ax.hlines(0, 0, 0, colors='none')\n-ax.hlines(1, 0, 0, colors='none')\n+ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+ax.legend()\n+ax.grid(True)\n \n-# ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# ax.legend()\n-# ax.grid(True)\n-\n plt.show()\n \n-\n"
                },
                {
                    "date": 1720343635623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \n # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n-ax.axvline(t_eq, color='red', linestyle='--', linewidth=2)\n+ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--', linewidth=2)\n ax.axhline(1, color='green', linestyle='--', linewidth=2, xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n ax.axhline(0, color='black', linewidth=2, xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n \n@@ -51,10 +51,10 @@\n # Add parameter names\n ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n-ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-ax.legend()\n+# ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# ax.legend()\n ax.grid(True)\n \n plt.show()\n \n"
                },
                {
                    "date": 1720343642051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,11 +22,11 @@\n # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n-ax.axvline(t_diff, color='blue', linestyle='--', linewidth=2)\n-ax.axhline(1, color='green', linestyle='--', linewidth=2, xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n-ax.axhline(0, color='black', linewidth=2, xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n+ax.axvline(t_diff, color='blue', linestyle='--')\n+ax.axhline(1, color='green', linestyle='--', xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n+ax.axhline(0, color='black', xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n"
                },
                {
                    "date": 1720343665038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n-ax.axhline(1, color='green', linestyle='--', xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n+ax.axhline(1, color='green', linestyle='--', xmin=0.00, xmax=0.98)  # Adjust horizontal line length\n ax.axhline(0, color='black', xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n"
                },
                {
                    "date": 1720343678123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n ax.axhline(1, color='green', linestyle='--', xmin=0.00, xmax=0.98)  # Adjust horizontal line length\n-ax.axhline(0, color='black', xmin=0.02, xmax=0.98)  # Adjust horizontal line length\n+ax.axhline(0, color='black', xmin=0.00, xmax=0.98)  # Adjust horizontal line length\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n@@ -44,9 +44,9 @@\n ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n # Adding axis labels\n-ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+ax.text(7.6, -0.00, 'x', ha='center', va='center', fontsize=12, color='black')\n ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n"
                },
                {
                    "date": 1720343684618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,15 +43,15 @@\n arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n-# Adding axis labels\n-ax.text(7.6, -0.00, 'x', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+# # Adding axis labels\n+# ax.text(7.6, -0.00, 'x', ha='center', va='center', fontsize=12, color='black')\n+# ax.text(-0.0, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n-ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+ax.text(3.5, -0.0, 'd', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.0, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n # ax.legend()\n ax.grid(True)\n"
                },
                {
                    "date": 1720343726243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n # ax.text(-0.0, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n ax.text(3.5, -0.0, 'd', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.0, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.0, 0.5, 'diff', ha='center', va='top', fontsize=12, color='black')\n \n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n # ax.legend()\n ax.grid(True)\n"
                },
                {
                    "date": 1720343741299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,15 +43,15 @@\n arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n-# # Adding axis labels\n-# ax.text(7.6, -0.00, 'x', ha='center', va='center', fontsize=12, color='black')\n-# ax.text(-0.0, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+# Adding axis labels\n+ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n-ax.text(3.5, -0.0, 'd', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.0, 0.5, 'diff', ha='center', va='top', fontsize=12, color='black')\n+ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n # ax.legend()\n ax.grid(True)\n"
                },
                {
                    "date": 1720343787055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,10 @@\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n-ax.axhline(1, color='green', linestyle='--', xmin=0.00, xmax=0.98)  # Adjust horizontal line length\n-ax.axhline(0, color='black', xmin=0.00, xmax=0.98)  # Adjust horizontal line length\n+ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--', linewidth=2)\n+ax.hlines(0, -0.1, 7.5, colors='black', linewidth=2)\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n"
                },
                {
                    "date": 1720343886835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,11 +43,11 @@\n arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n-# Adding axis labels\n-ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+# # Adding axis labels\n+# ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n"
                },
                {
                    "date": 1720343906587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--', linewidth=2)\n-ax.hlines(0, -0.1, 7.5, colors='black', linewidth=2)\n+ax.hlines(0, -0.1, 7.5, colors='black')\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n"
                },
                {
                    "date": 1720343933892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,16 +23,16 @@\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n-ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--', linewidth=2)\n+ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n ax.hlines(0, -0.1, 7.5, colors='black')\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n ax.set_yticks([0, 1])\n-ax.set_yticklabels(['0', '1'])\n+# ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n ax.spines['top'].set_visible(False)\n ax.spines['right'].set_visible(False)\n"
                },
                {
                    "date": 1720343948087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,10 @@\n ax.spines['bottom'].set_position('zero')\n \n # Drawing axis arrows by extending spines\n arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+# ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n # # Adding axis labels\n # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n"
                },
                {
                    "date": 1720343958814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n ax.spines['bottom'].set_position('zero')\n \n # Drawing axis arrows by extending spines\n arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n # # Adding axis labels\n # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n"
                },
                {
                    "date": 1720343971702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,43 +18,43 @@\n # Create x values\n x_values = np.linspace(0, 7, 400)\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n-# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-fig, ax = plt.subplots(figsize=(10, 6))\n-ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n-ax.axvline(t_eq, color='red', linestyle='--')\n-ax.axvline(t_diff, color='blue', linestyle='--')\n-ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-ax.hlines(0, -0.1, 7.5, colors='black')\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# ax.hlines(0, -0.1, 7.5, colors='black')\n \n-# Annotate the axes\n-ax.set_xticks([t_eq, t_diff])\n-ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-ax.set_yticks([0, 1])\n-# ax.set_yticklabels(['0', '1'])\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n \n-# Remove the top and right spines\n-ax.spines['top'].set_visible(False)\n-ax.spines['right'].set_visible(False)\n-ax.spines['left'].set_position('zero')\n-ax.spines['bottom'].set_position('zero')\n+# # Remove the top and right spines\n+# ax.spines['top'].set_visible(False)\n+# ax.spines['right'].set_visible(False)\n+# ax.spines['left'].set_position('zero')\n+# ax.spines['bottom'].set_position('zero')\n \n-# Drawing axis arrows by extending spines\n-arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # Drawing axis arrows by extending spines\n+# arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n-# # Adding axis labels\n-# ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n-# Add parameter names\n-ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # Add parameter names\n+# ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n-# ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# ax.legend()\n-ax.grid(True)\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n \n-plt.show()\n+# plt.show()\n \n"
                },
                {
                    "date": 1720343976928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,5 +56,44 @@\n # # ax.legend()\n # ax.grid(True)\n \n # plt.show()\n+# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+fig, ax = plt.subplots(figsize=(10, 6))\n+ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n+ax.axvline(t_eq, color='red', linestyle='--', linewidth=2)\n+ax.axvline(t_diff, color='blue', linestyle='--', linewidth=2)\n+# Adjust horizontal lines to not interfere with labels\n+ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--', linewidth=2)\n+ax.hlines(0, -0.1, 7.5, colors='black', linewidth=2)\n \n+# Annotate the axes\n+ax.set_xticks([t_eq, t_diff])\n+ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+ax.set_yticks([0, 1])\n+ax.set_yticklabels(['0', '1'])\n+\n+# Remove the top and right spines\n+ax.spines['top'].set_visible(False)\n+ax.spines['right'].set_visible(False)\n+ax.spines['left'].set_position(('data', 0))\n+ax.spines['bottom'].set_position(('data', 0))\n+\n+# Drawing axis arrows by extending spines\n+arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+ax.plot(7.5, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+ax.plot(0, 1.2, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# Adding axis labels\n+ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# Add parameter names\n+ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+\n+# ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# ax.legend()\n+ax.grid(True)\n+\n+plt.show()\n+\n"
                },
                {
                    "date": 1720344016051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,44 +56,6 @@\n # # ax.legend()\n # ax.grid(True)\n \n # plt.show()\n-# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-fig, ax = plt.subplots(figsize=(10, 6))\n-ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n-ax.axvline(t_eq, color='red', linestyle='--', linewidth=2)\n-ax.axvline(t_diff, color='blue', linestyle='--', linewidth=2)\n-# Adjust horizontal lines to not interfere with labels\n-ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--', linewidth=2)\n-ax.hlines(0, -0.1, 7.5, colors='black', linewidth=2)\n \n-# Annotate the axes\n-ax.set_xticks([t_eq, t_diff])\n-ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-ax.set_yticks([0, 1])\n-ax.set_yticklabels(['0', '1'])\n \n-# Remove the top and right spines\n-ax.spines['top'].set_visible(False)\n-ax.spines['right'].set_visible(False)\n-ax.spines['left'].set_position(('data', 0))\n-ax.spines['bottom'].set_position(('data', 0))\n-\n-# Drawing axis arrows by extending spines\n-arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-ax.plot(7.5, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-ax.plot(0, 1.2, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# Adding axis labels\n-ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# Add parameter names\n-ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-\n-# ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# ax.legend()\n-ax.grid(True)\n-\n-plt.show()\n-\n"
                },
                {
                    "date": 1720344138859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,44 +18,49 @@\n # Create x values\n x_values = np.linspace(0, 7, 400)\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# ax.hlines(0, -0.1, 7.5, colors='black')\n+# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+fig, ax = plt.subplots(figsize=(10, 6))\n+ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n+ax.axvline(t_eq, color='red', linestyle='--')\n+ax.axvline(t_diff, color='blue', linestyle='--')\n+ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+ax.hlines(0, -0.1, 7.5, colors='black')\n \n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n+# Annotate the axes\n+ax.set_xticks([t_eq, t_diff])\n+ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+ax.set_yticks([0, 1])\n+# ax.set_yticklabels(['0', '1'])\n \n-# # Remove the top and right spines\n-# ax.spines['top'].set_visible(False)\n-# ax.spines['right'].set_visible(False)\n-# ax.spines['left'].set_position('zero')\n-# ax.spines['bottom'].set_position('zero')\n+# Remove the top and right spines\n+ax.spines['top'].set_visible(False)\n+ax.spines['right'].set_visible(False)\n+ax.spines['left'].set_position('zero')\n+ax.spines['bottom'].set_position('zero')\n+ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+ax.axis[\"left\"].set_axisline_style(\"->\", size = 1.5)\n+#通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+ax.axis[\"top\"].set_visible(False)\n+ax.axis[\"right\"].set_visible(False)\n \n-# # Drawing axis arrows by extending spines\n-# arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+# Drawing axis arrows by extending spines\n+arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+# # Adding axis labels\n+# ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n-# # Add parameter names\n-# ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# Add parameter names\n+ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n+# ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# ax.legend()\n+ax.grid(True)\n \n-# plt.show()\n+plt.show()\n \n \n"
                },
                {
                    "date": 1720344150192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,13 +33,13 @@\n ax.set_yticks([0, 1])\n # ax.set_yticklabels(['0', '1'])\n \n # Remove the top and right spines\n-ax.spines['top'].set_visible(False)\n-ax.spines['right'].set_visible(False)\n-ax.spines['left'].set_position('zero')\n-ax.spines['bottom'].set_position('zero')\n-ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.spines['top'].set_visible(False)\n+# ax.spines['right'].set_visible(False)\n+# ax.spines['left'].set_position('zero')\n+# ax.spines['bottom'].set_position('zero')\n+ax.axis[\"bottom\"].set_axisline_style(\"->\", size = 1.5)\n ax.axis[\"left\"].set_axisline_style(\"->\", size = 1.5)\n #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n ax.axis[\"top\"].set_visible(False)\n ax.axis[\"right\"].set_visible(False)\n"
                },
                {
                    "date": 1720344155251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# Define the piecewise function\n+def piecewise_function(x, t_eq, t_diff):\n+    if x < t_eq:\n+        return 0\n+    elif x > t_diff:\n+        return 1\n+    else:\n+        return (x - t_eq) / (t_diff - t_eq)\n+\n+# Parameters\n+t_eq = 2\n+t_diff = 5\n+\n+# Create x values\n+x_values = np.linspace(0, 7, 400)\n+y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+fig, ax = plt.subplots(figsize=(10, 6))\n+ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n+ax.axvline(t_eq, color='red', linestyle='--')\n+ax.axvline(t_diff, color='blue', linestyle='--')\n+ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# Annotate the axes\n+ax.set_xticks([t_eq, t_diff])\n+ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+ax.set_yticks([0, 1])\n+# ax.set_yticklabels(['0', '1'])\n+\n+# Remove the top and right spines\n+# ax.spines['top'].set_visible(False)\n+# ax.spines['right'].set_visible(False)\n+# ax.spines['left'].set_position('zero')\n+# ax.spines['bottom'].set_position('zero')\n+ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+ax.axis[\"left\"].set_axisline_style(\"->\", size = 1.5)\n+#通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+ax.axis[\"top\"].set_visible(False)\n+ax.axis[\"right\"].set_visible(False)\n+\n+# Drawing axis arrows by extending spines\n+arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # Adding axis labels\n+# ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# Add parameter names\n+ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+\n+# ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# ax.legend()\n+ax.grid(True)\n+\n+plt.show()\n+\n+\n"
                },
                {
                    "date": 1720344174896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n # ax.spines['right'].set_visible(False)\n # ax.spines['left'].set_position('zero')\n # ax.spines['bottom'].set_position('zero')\n ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-ax.axis[\"left\"].set_axisline_style(\"->\", size = 1.5)\n+ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n ax.axis[\"top\"].set_visible(False)\n ax.axis[\"right\"].set_visible(False)\n \n@@ -63,70 +63,4 @@\n \n plt.show()\n \n \n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n-\n-# Define the piecewise function\n-def piecewise_function(x, t_eq, t_diff):\n-    if x < t_eq:\n-        return 0\n-    elif x > t_diff:\n-        return 1\n-    else:\n-        return (x - t_eq) / (t_diff - t_eq)\n-\n-# Parameters\n-t_eq = 2\n-t_diff = 5\n-\n-# Create x values\n-x_values = np.linspace(0, 7, 400)\n-y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-fig, ax = plt.subplots(figsize=(10, 6))\n-ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n-ax.axvline(t_eq, color='red', linestyle='--')\n-ax.axvline(t_diff, color='blue', linestyle='--')\n-ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# Annotate the axes\n-ax.set_xticks([t_eq, t_diff])\n-ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-ax.set_yticks([0, 1])\n-# ax.set_yticklabels(['0', '1'])\n-\n-# Remove the top and right spines\n-# ax.spines['top'].set_visible(False)\n-# ax.spines['right'].set_visible(False)\n-# ax.spines['left'].set_position('zero')\n-# ax.spines['bottom'].set_position('zero')\n-ax.axis[\"bottom\"].set_axisline_style(\"->\", size = 1.5)\n-ax.axis[\"left\"].set_axisline_style(\"->\", size = 1.5)\n-#通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-ax.axis[\"top\"].set_visible(False)\n-ax.axis[\"right\"].set_visible(False)\n-\n-# Drawing axis arrows by extending spines\n-arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # Adding axis labels\n-# ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# Add parameter names\n-ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-\n-# ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# ax.legend()\n-ax.grid(True)\n-\n-plt.show()\n-\n-\n"
                },
                {
                    "date": 1720344196010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,13 @@\n x_values = np.linspace(0, 7, 400)\n y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+fig = plt.figure()\n+#使用axisartist.Subplot方法创建一个绘图区对象ax\n+ax = axisartist.Subplot(fig, 111)\n+#将绘图区对象添加到画布中\n+fig.add_axes(ax)\n fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n"
                },
                {
                    "date": 1720344301489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n #使用axisartist.Subplot方法创建一个绘图区对象ax\n ax = axisartist.Subplot(fig, 111)\n #将绘图区对象添加到画布中\n fig.add_axes(ax)\n-fig, ax = plt.subplots(figsize=(10, 6))\n+# fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n@@ -49,11 +49,11 @@\n ax.axis[\"top\"].set_visible(False)\n ax.axis[\"right\"].set_visible(False)\n \n # Drawing axis arrows by extending spines\n-arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+# arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n # # Adding axis labels\n # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n"
                },
                {
                    "date": 1720344357007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-ax.hlines(0, -0.1, 7.5, colors='black')\n+# ax.hlines(0, -0.1, 7.5, colors='black')\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n@@ -58,10 +58,10 @@\n # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n-ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n # ax.legend()\n ax.grid(True)\n"
                },
                {
                    "date": 1720344382514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n # fig, ax = plt.subplots(figsize=(10, 6))\n ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n-ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n # ax.hlines(0, -0.1, 7.5, colors='black')\n \n # Annotate the axes\n ax.set_xticks([t_eq, t_diff])\n@@ -58,10 +58,10 @@\n # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n-# ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n # ax.legend()\n ax.grid(True)\n"
                },
                {
                    "date": 1720344412737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,10 +58,10 @@\n # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n # Add parameter names\n-ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n \n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n # ax.legend()\n ax.grid(True)\n"
                },
                {
                    "date": 1720344477031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,10 @@\n ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n ax.axis[\"top\"].set_visible(False)\n ax.axis[\"right\"].set_visible(False)\n+ax.set_xlabel('d', fontsize=12)\n+ax.set_ylabel('diff', fontsize=12)\n \n # Drawing axis arrows by extending spines\n # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n@@ -60,9 +62,8 @@\n \n # Add parameter names\n # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-\n # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n # ax.legend()\n ax.grid(True)\n \n"
                },
                {
                    "date": 1720344524668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n ax = axisartist.Subplot(fig, 111)\n #将绘图区对象添加到画布中\n fig.add_axes(ax)\n # fig, ax = plt.subplots(figsize=(10, 6))\n-ax.plot(x_values, y_values, label='Piecewise Function', linewidth=2)  # Increase line thickness\n+ax.plot(x_values, y_values, label='Piecewise Function', cololinewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n # ax.hlines(0, -0.1, 7.5, colors='black')\n@@ -47,8 +47,9 @@\n ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n ax.axis[\"top\"].set_visible(False)\n ax.axis[\"right\"].set_visible(False)\n+\n ax.set_xlabel('d', fontsize=12)\n ax.set_ylabel('diff', fontsize=12)\n \n # Drawing axis arrows by extending spines\n"
                },
                {
                    "date": 1720344529889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n ax = axisartist.Subplot(fig, 111)\n #将绘图区对象添加到画布中\n fig.add_axes(ax)\n # fig, ax = plt.subplots(figsize=(10, 6))\n-ax.plot(x_values, y_values, label='Piecewise Function', cololinewidth=2)  # Increase line thickness\n+ax.plot(x_values, y_values, label='Piecewise Function', color = '', linewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n # ax.hlines(0, -0.1, 7.5, colors='black')\n"
                },
                {
                    "date": 1720344547230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n ax = axisartist.Subplot(fig, 111)\n #将绘图区对象添加到画布中\n fig.add_axes(ax)\n # fig, ax = plt.subplots(figsize=(10, 6))\n-ax.plot(x_values, y_values, label='Piecewise Function', color = '', linewidth=2)  # Increase line thickness\n+ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n ax.axvline(t_eq, color='red', linestyle='--')\n ax.axvline(t_diff, color='blue', linestyle='--')\n # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n # ax.hlines(0, -0.1, 7.5, colors='black')\n"
                },
                {
                    "date": 1720344841105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n ax.axis[\"top\"].set_visible(False)\n ax.axis[\"right\"].set_visible(False)\n \n-ax.set_xlabel('d', fontsize=12)\n+ax.set_xlabel('rd', fontsize=12)\n ax.set_ylabel('diff', fontsize=12)\n \n # Drawing axis arrows by extending spines\n # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n"
                },
                {
                    "date": 1720344847192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,10 @@\n #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n ax.axis[\"top\"].set_visible(False)\n ax.axis[\"right\"].set_visible(False)\n \n-ax.set_xlabel('rd', fontsize=12)\n-ax.set_ylabel('diff', fontsize=12)\n+ax.set_xlabel('r$d$', fontsize=12)\n+ax.set_ylabel('r$diff', fontsize=12)\n \n # Drawing axis arrows by extending spines\n # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n"
                },
                {
                    "date": 1720344860688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,10 @@\n #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n ax.axis[\"top\"].set_visible(False)\n ax.axis[\"right\"].set_visible(False)\n \n-ax.set_xlabel('r$d$', fontsize=12)\n-ax.set_ylabel('r$diff', fontsize=12)\n+ax.set_xlabel(r'$d$', fontsize=12)\n+ax.set_ylabel('r$diff$', fontsize=12)\n \n # Drawing axis arrows by extending spines\n # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n"
                },
                {
                    "date": 1720492337900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,73 +1,75 @@\n import numpy as np\n import matplotlib.pyplot as plt\n import mpl_toolkits.axisartist as axisartist\n \n-# Define the piecewise function\n-def piecewise_function(x, t_eq, t_diff):\n-    if x < t_eq:\n-        return 0\n-    elif x > t_diff:\n-        return 1\n-    else:\n-        return (x - t_eq) / (t_diff - t_eq)\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n \n-# Parameters\n-t_eq = 2\n-t_diff = 5\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n \n-# Create x values\n-x_values = np.linspace(0, 7, 400)\n-y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n-# Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-fig = plt.figure()\n-#使用axisartist.Subplot方法创建一个绘图区对象ax\n-ax = axisartist.Subplot(fig, 111)\n-#将绘图区对象添加到画布中\n-fig.add_axes(ax)\n-# fig, ax = plt.subplots(figsize=(10, 6))\n-ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-ax.axvline(t_eq, color='red', linestyle='--')\n-ax.axvline(t_diff, color='blue', linestyle='--')\n-# ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# ax.hlines(0, -0.1, 7.5, colors='black')\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n \n-# Annotate the axes\n-ax.set_xticks([t_eq, t_diff])\n-ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-ax.set_yticks([0, 1])\n-# ax.set_yticklabels(['0', '1'])\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n \n-# Remove the top and right spines\n-# ax.spines['top'].set_visible(False)\n-# ax.spines['right'].set_visible(False)\n-# ax.spines['left'].set_position('zero')\n-# ax.spines['bottom'].set_position('zero')\n-ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-#通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-ax.axis[\"top\"].set_visible(False)\n-ax.axis[\"right\"].set_visible(False)\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n \n-ax.set_xlabel(r'$d$', fontsize=12)\n-ax.set_ylabel('r$diff$', fontsize=12)\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n \n-# Drawing axis arrows by extending spines\n-# arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n \n-# # Adding axis labels\n-# ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n \n-# Add parameter names\n-# ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# ax.legend()\n-ax.grid(True)\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n \n-plt.show()\n+# plt.show()\n \n+# endregion\n \n"
                },
                {
                    "date": 1720492346572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,4 +72,31 @@\n # plt.show()\n \n # endregion\n \n+\n+import numpy a\n+\n+# 定义分段函数\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-1, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n+plt.title('Piecewise Linear Function')\n+plt.xlabel('x')\n+plt.ylabel('y')\n+plt.axhline(0, color='gray', linewidth=0.5)\n+plt.axvline(0, color='gray', linewidth=0.5)\n+plt.legend()\n+plt.grid(True)\n+plt.show()\n"
                },
                {
                    "date": 1720492354929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,30 +73,32 @@\n \n # endregion\n \n \n-import numpy a\n \n-# 定义分段函数\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n+# region \n+# # 定义分段函数\n+# def piecewise_linear_function(x):\n+#     if x < 0:\n+#         return 0\n+#     elif x > 1:\n+#         return 1\n+#     else:\n+#         return x\n \n-# 生成数据\n-x = np.linspace(-1, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n+# # 生成数据\n+# x = np.linspace(-1, 2, 400)\n+# y = np.array([piecewise_linear_function(xi) for xi in x])\n \n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n-plt.title('Piecewise Linear Function')\n-plt.xlabel('x')\n-plt.ylabel('y')\n-plt.axhline(0, color='gray', linewidth=0.5)\n-plt.axvline(0, color='gray', linewidth=0.5)\n-plt.legend()\n-plt.grid(True)\n-plt.show()\n+# # 绘图\n+# plt.figure(figsize=(10, 6))\n+# plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n+# plt.title('Piecewise Linear Function')\n+# plt.xlabel('x')\n+# plt.ylabel('y')\n+# plt.axhline(0, color='gray', linewidth=0.5)\n+# plt.axvline(0, color='gray', linewidth=0.5)\n+# plt.legend()\n+# plt.grid(True)\n+# plt.show()\n+\n+# endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720492361150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,30 +75,30 @@\n \n \n \n # region \n-# # 定义分段函数\n-# def piecewise_linear_function(x):\n-#     if x < 0:\n-#         return 0\n-#     elif x > 1:\n-#         return 1\n-#     else:\n-#         return x\n \n-# # 生成数据\n-# x = np.linspace(-1, 2, 400)\n-# y = np.array([piecewise_linear_function(xi) for xi in x])\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n \n-# # 绘图\n-# plt.figure(figsize=(10, 6))\n-# plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n-# plt.title('Piecewise Linear Function')\n-# plt.xlabel('x')\n-# plt.ylabel('y')\n-# plt.axhline(0, color='gray', linewidth=0.5)\n-# plt.axvline(0, color='gray', linewidth=0.5)\n-# plt.legend()\n-# plt.grid(True)\n-# plt.show()\n+# 生成数据\n+x = np.linspace(-1, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n \n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n+plt.title('Piecewise Linear Function')\n+plt.xlabel('x')\n+plt.ylabel('y')\n+plt.axhline(0, color='gray', linewidth=0.5)\n+plt.axvline(0, color='gray', linewidth=0.5)\n+plt.legend()\n+plt.grid(True)\n+plt.show()\n+\n # endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720492368459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n \n \n \n # region \n-\n+x <\n def piecewise_linear_function(x):\n     if x < 0:\n         return 0\n     elif x > 1:\n"
                },
                {
                    "date": 1720492375515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n \n \n \n # region \n-x <\n+# x <0 \n def piecewise_linear_function(x):\n     if x < 0:\n         return 0\n     elif x > 1:\n"
                },
                {
                    "date": 1720492385609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x < 0,  \n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-1, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n+plt.title('Piecewise Linear Function')\n+plt.xlabel('x')\n+plt.ylabel('y')\n+plt.axhline(0, color='gray', linewidth=0.5)\n+plt.axvline(0, color='gray', linewidth=0.5)\n+plt.legend()\n+plt.grid(True)\n+plt.show()\n+\n+# endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720492391830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-1, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n+plt.title('Piecewise Linear Function')\n+plt.xlabel('x')\n+plt.ylabel('y')\n+plt.axhline(0, color='gray', linewidth=0.5)\n+plt.axvline(0, color='gray', linewidth=0.5)\n+plt.legend()\n+plt.grid(True)\n+plt.show()\n+\n+# endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720492401843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n \n \n \n # region \n-# x<0, y=0; x\n+# x<0, y=0; x>1, y=1; x\\in [0,1]\n def piecewise_linear_function(x):\n     if x < 0:\n         return 0\n     elif x > 1:\n@@ -100,213 +100,5 @@\n plt.legend()\n plt.grid(True)\n plt.show()\n \n-# endregion\n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n-\n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n-\n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n-\n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x < 0,  \n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# 生成数据\n-x = np.linspace(-1, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n-plt.title('Piecewise Linear Function')\n-plt.xlabel('x')\n-plt.ylabel('y')\n-plt.axhline(0, color='gray', linewidth=0.5)\n-plt.axvline(0, color='gray', linewidth=0.5)\n-plt.legend()\n-plt.grid(True)\n-plt.show()\n-\n-# endregion\n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n-\n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n-\n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n-\n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x <0 \n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# 生成数据\n-x = np.linspace(-1, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n-plt.title('Piecewise Linear Function')\n-plt.xlabel('x')\n-plt.ylabel('y')\n-plt.axhline(0, color='gray', linewidth=0.5)\n-plt.axvline(0, color='gray', linewidth=0.5)\n-plt.legend()\n-plt.grid(True)\n-plt.show()\n-\n # endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720492422375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n \n \n \n # region \n-# x<0, y=0; x>1, y=1; x\\in [0,1]\n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n def piecewise_linear_function(x):\n     if x < 0:\n         return 0\n     elif x > 1:\n@@ -90,9 +90,9 @@\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n+# plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n plt.title('Piecewise Linear Function')\n plt.xlabel('x')\n plt.ylabel('y')\n plt.axhline(0, color='gray', linewidth=0.5)\n"
                },
                {
                    "date": 1720492428161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,10 +90,10 @@\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 6))\n-# plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n-plt.title('Piecewise Linear Function')\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n+# plt.title('Piecewise Linear Function')\n plt.xlabel('x')\n plt.ylabel('y')\n plt.axhline(0, color='gray', linewidth=0.5)\n plt.axvline(0, color='gray', linewidth=0.5)\n"
                },
                {
                    "date": 1720492435680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n+plt.plot(x, y, color='blue')\n # plt.title('Piecewise Linear Function')\n plt.xlabel('x')\n plt.ylabel('y')\n plt.axhline(0, color='gray', linewidth=0.5)\n"
                },
                {
                    "date": 1720492462834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 6))\n-plt.plot(x, y, color='blue')\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n # plt.title('Piecewise Linear Function')\n plt.xlabel('x')\n plt.ylabel('y')\n plt.axhline(0, color='gray', linewidth=0.5)\n"
                },
                {
                    "date": 1720492474764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n+plt.plot(x, y, color='blue')\n # plt.title('Piecewise Linear Function')\n plt.xlabel('x')\n plt.ylabel('y')\n plt.axhline(0, color='gray', linewidth=0.5)\n"
                },
                {
                    "date": 1720492695768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,29 +76,31 @@\n \n \n # region \n # x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n # 生成数据\n x = np.linspace(-1, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 6))\n-plt.plot(x, y, color='blue')\n-# plt.title('Piecewise Linear Function')\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n+plt.title('Piecewise Linear Function')\n plt.xlabel('x')\n plt.ylabel('y')\n-plt.axhline(0, color='gray', linewidth=0.5)\n-plt.axvline(0, color='gray', linewidth=0.5)\n+\n+# 添加坐标轴\n+plt.axhline(0, color='black', linewidth=1.5)\n+plt.axvline(0, color='black', linewidth=1.5)\n+\n+# 添加箭头\n+plt.annotate('', xy=(2, 0), xytext=(0, 0),\n+             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5))\n+plt.annotate('', xy=(0, 1.1), xytext=(0, 0),\n+             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5))\n+\n plt.legend()\n-plt.grid(True)\n+plt.grid(False)\n plt.show()\n \n+\n # endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720492703014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,31 +76,29 @@\n \n \n # region \n # x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n # 生成数据\n x = np.linspace(-1, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n-plt.title('Piecewise Linear Function')\n+plt.plot(x, y, color='blue')\n+# plt.title('Piecewise Linear Function')\n plt.xlabel('x')\n plt.ylabel('y')\n-\n-# 添加坐标轴\n-plt.axhline(0, color='black', linewidth=1.5)\n-plt.axvline(0, color='black', linewidth=1.5)\n-\n-# 添加箭头\n-plt.annotate('', xy=(2, 0), xytext=(0, 0),\n-             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5))\n-plt.annotate('', xy=(0, 1.1), xytext=(0, 0),\n-             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5))\n-\n+plt.axhline(0, color='gray', linewidth=0.5)\n+plt.axvline(0, color='gray', linewidth=0.5)\n plt.legend()\n-plt.grid(False)\n+plt.grid(True)\n plt.show()\n \n-\n # endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720493371657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,29 +76,39 @@\n \n \n # region \n # x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n+# def piecewise_linear_function(x):\n+#     if x < 0:\n+#         return 0\n+#     elif x > 1:\n+#         return 1\n+#     else:\n+#         return x\n \n-# 生成数据\n-x = np.linspace(-1, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n+# # 生成数据\n+# x = np.linspace(-1, 2, 400)\n+# y = np.array([piecewise_linear_function(xi) for xi in x])\n \n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, color='blue')\n+# # 绘图\n+# plt.figure(figsize=(10, 6))\n+# plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n # plt.title('Piecewise Linear Function')\n-plt.xlabel('x')\n-plt.ylabel('y')\n-plt.axhline(0, color='gray', linewidth=0.5)\n-plt.axvline(0, color='gray', linewidth=0.5)\n-plt.legend()\n-plt.grid(True)\n-plt.show()\n+# plt.xlabel('x')\n+# plt.ylabel('y')\n \n+# # 添加坐标轴\n+# plt.axhline(0, color='black', linewidth=1.5)\n+# plt.axvline(0, color='black', linewidth=1.5)\n+\n+# # 添加箭头\n+# plt.annotate('', xy=(2, 0), xytext=(0, 0),\n+#              arrowprops=dict(facecolor='black', shrink=0.05, width=1.5))\n+# plt.annotate('', xy=(0, 1.1), xytext=(0, 0),\n+#              arrowprops=dict(facecolor='black', shrink=0.05, width=1.5))\n+\n+# plt.legend()\n+# plt.grid(False)\n+# plt.show()\n+\n+\n # endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720493392273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,6 +109,24 @@\n # plt.legend()\n # plt.grid(False)\n # plt.show()\n \n-\n+x = np.arange(-2*np.pi,2*np.pi,0.01)#定义横轴范围\n+y = np.sin(3*x)/x#函数\n+y2 = np.sin(2*x)/x\n+y3 = np.sin(x)/x\n+plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n+plt.plot(x,y2,'--')\n+plt.plot(x,y3)\n+plt.xticks([-2*np.pi,-np.pi,0,np.pi,2*np.pi],[r'$-2\\pi$',r'$\\pi$','$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+plt.yticks([-1,0,1,2,3],[r'$-1$','$0$','$+1$','$+2$','$+3$'])\n+plt.legend(['y','y2','y3'])\n+plt.title('M10')\n+ax = plt.gca()#使用gca函数获取axes对象\n+ax.spines['right'].set_color('none')#右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n+ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n+ax.spines['left'].set_position(('data',0))\n+plt.show()\n # endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720493434962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,12 +109,12 @@\n # plt.legend()\n # plt.grid(False)\n # plt.show()\n \n-x = np.arange(-2*np.pi,2*np.pi,0.01)#定义横轴范围\n-y = np.sin(3*x)/x#函数\n-y2 = np.sin(2*x)/x\n-y3 = np.sin(x)/x\n+# x = np.arange(-2*np.pi,2*np.pi,0.01)#定义横轴范围\n+# y = np.sin(3*x)/x#函数\n+# y2 = np.sin(2*x)/x\n+# y3 = np.sin(x)/x\n plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n plt.plot(x,y2,'--')\n plt.plot(x,y3)\n plt.xticks([-2*np.pi,-np.pi,0,np.pi,2*np.pi],[r'$-2\\pi$',r'$\\pi$','$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n"
                },
                {
                    "date": 1720493442403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,19 +76,19 @@\n \n \n # region \n # x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-# def piecewise_linear_function(x):\n-#     if x < 0:\n-#         return 0\n-#     elif x > 1:\n-#         return 1\n-#     else:\n-#         return x\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n \n # # 生成数据\n-# x = np.linspace(-1, 2, 400)\n-# y = np.array([piecewise_linear_function(xi) for xi in x])\n+x = np.linspace(-1, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # # 绘图\n # plt.figure(figsize=(10, 6))\n # plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n"
                },
                {
                    "date": 1720493449974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,10 +114,8 @@\n # y = np.sin(3*x)/x#函数\n # y2 = np.sin(2*x)/x\n # y3 = np.sin(x)/x\n plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-plt.plot(x,y2,'--')\n-plt.plot(x,y3)\n plt.xticks([-2*np.pi,-np.pi,0,np.pi,2*np.pi],[r'$-2\\pi$',r'$\\pi$','$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n plt.yticks([-1,0,1,2,3],[r'$-1$','$0$','$+1$','$+2$','$+3$'])\n plt.legend(['y','y2','y3'])\n plt.title('M10')\n"
                },
                {
                    "date": 1720493463276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,17 +109,13 @@\n # plt.legend()\n # plt.grid(False)\n # plt.show()\n \n-# x = np.arange(-2*np.pi,2*np.pi,0.01)#定义横轴范围\n-# y = np.sin(3*x)/x#函数\n-# y2 = np.sin(2*x)/x\n-# y3 = np.sin(x)/x\n plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n plt.xticks([-2*np.pi,-np.pi,0,np.pi,2*np.pi],[r'$-2\\pi$',r'$\\pi$','$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n plt.yticks([-1,0,1,2,3],[r'$-1$','$0$','$+1$','$+2$','$+3$'])\n-plt.legend(['y','y2','y3'])\n-plt.title('M10')\n+# plt.legend(['y','y2','y3'])\n+# plt.title('M10')\n ax = plt.gca()#使用gca函数获取axes对象\n ax.spines['right'].set_color('none')#右侧边隐藏\n ax.spines['top'].set_color('none')\n ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n"
                },
                {
                    "date": 1720493510344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n # plt.grid(False)\n # plt.show()\n \n plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-plt.xticks([-2*np.pi,-np.pi,0,np.pi,2*np.pi],[r'$-2\\pi$',r'$\\pi$','$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+plt.xticks([-2,-np.pi,0,np.pi,2*np.pi],[r'$-2\\pi$',r'$\\pi$','$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n plt.yticks([-1,0,1,2,3],[r'$-1$','$0$','$+1$','$+2$','$+3$'])\n # plt.legend(['y','y2','y3'])\n # plt.title('M10')\n ax = plt.gca()#使用gca函数获取axes对象\n"
                },
                {
                    "date": 1720493516701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n # plt.grid(False)\n # plt.show()\n \n plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-plt.xticks([-2,-np.pi,0,np.pi,2*np.pi],[r'$-2\\pi$',r'$\\pi$','$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+plt.xticks([-2,-1,0,1,2],[r'$-2\\pi$',r'$\\pi$','$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n plt.yticks([-1,0,1,2,3],[r'$-1$','$0$','$+1$','$+2$','$+3$'])\n # plt.legend(['y','y2','y3'])\n # plt.title('M10')\n ax = plt.gca()#使用gca函数获取axes对象\n"
                },
                {
                    "date": 1720493523994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n # plt.grid(False)\n # plt.show()\n \n plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-plt.xticks([-2,-1,0,1,2],[r'$-2\\pi$',r'$\\pi$','$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+plt.xticks([-2,-1,0,1,2],[r'$-2',r'$\\pi$','$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n plt.yticks([-1,0,1,2,3],[r'$-1$','$0$','$+1$','$+2$','$+3$'])\n # plt.legend(['y','y2','y3'])\n # plt.title('M10')\n ax = plt.gca()#使用gca函数获取axes对象\n"
                },
                {
                    "date": 1720493530860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n # plt.grid(False)\n # plt.show()\n \n plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-plt.xticks([-2,-1,0,1,2],[r'$-2',r'$\\pi$','$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+plt.xticks([-2,-1,0,1,2],[-2,-1,'$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n plt.yticks([-1,0,1,2,3],[r'$-1$','$0$','$+1$','$+2$','$+3$'])\n # plt.legend(['y','y2','y3'])\n # plt.title('M10')\n ax = plt.gca()#使用gca函数获取axes对象\n"
                },
                {
                    "date": 1720493535897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n # plt.grid(False)\n # plt.show()\n \n plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-plt.xticks([-2,-1,0,1,2],[-2,-1,'$0$','$\\pi$','$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,'$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n plt.yticks([-1,0,1,2,3],[r'$-1$','$0$','$+1$','$+2$','$+3$'])\n # plt.legend(['y','y2','y3'])\n # plt.title('M10')\n ax = plt.gca()#使用gca函数获取axes对象\n"
                },
                {
                    "date": 1720493546504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,10 +110,10 @@\n # plt.grid(False)\n # plt.show()\n \n plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,'$2\\pi$'])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n-plt.yticks([-1,0,1,2,3],[r'$-1$','$0$','$+1$','$+2$','$+3$'])\n+plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+plt.yticks([-1,0,1,],[r'$-1$','$0$','$+1$','$+2$','$+3$'])\n # plt.legend(['y','y2','y3'])\n # plt.title('M10')\n ax = plt.gca()#使用gca函数获取axes对象\n ax.spines['right'].set_color('none')#右侧边隐藏\n"
                },
                {
                    "date": 1720493553519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# # 生成数据\n+x = np.linspace(-1, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# # 绘图\n+# plt.figure(figsize=(10, 6))\n+# plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n+# plt.title('Piecewise Linear Function')\n+# plt.xlabel('x')\n+# plt.ylabel('y')\n+\n+# # 添加坐标轴\n+# plt.axhline(0, color='black', linewidth=1.5)\n+# plt.axvline(0, color='black', linewidth=1.5)\n+\n+# # 添加箭头\n+# plt.annotate('', xy=(2, 0), xytext=(0, 0),\n+#              arrowprops=dict(facecolor='black', shrink=0.05, width=1.5))\n+# plt.annotate('', xy=(0, 1.1), xytext=(0, 0),\n+#              arrowprops=dict(facecolor='black', shrink=0.05, width=1.5))\n+\n+# plt.legend()\n+# plt.grid(False)\n+# plt.show()\n+\n+plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n+plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+plt.yticks([-1,0,1,2],[01,'$0$','$+1$','$+2$','$+3$'])\n+# plt.legend(['y','y2','y3'])\n+# plt.title('M10')\n+ax = plt.gca()#使用gca函数获取axes对象\n+ax.spines['right'].set_color('none')#右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n+ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n+ax.spines['left'].set_position(('data',0))\n+plt.show()\n+# endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720493559327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n # plt.show()\n \n plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n-plt.yticks([-1,0,1,2],[01,'$0$','$+1$','$+2$','$+3$'])\n+plt.yticks([-1,0,1,2],[-1,0,1,2])\n # plt.legend(['y','y2','y3'])\n # plt.title('M10')\n ax = plt.gca()#使用gca函数获取axes对象\n ax.spines['right'].set_color('none')#右侧边隐藏\n@@ -122,131 +122,5 @@\n ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n ax.spines['left'].set_position(('data',0))\n plt.show()\n-# endregion\n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n-\n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n-\n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n-\n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# # 生成数据\n-x = np.linspace(-1, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# # 绘图\n-# plt.figure(figsize=(10, 6))\n-# plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n-# plt.title('Piecewise Linear Function')\n-# plt.xlabel('x')\n-# plt.ylabel('y')\n-\n-# # 添加坐标轴\n-# plt.axhline(0, color='black', linewidth=1.5)\n-# plt.axvline(0, color='black', linewidth=1.5)\n-\n-# # 添加箭头\n-# plt.annotate('', xy=(2, 0), xytext=(0, 0),\n-#              arrowprops=dict(facecolor='black', shrink=0.05, width=1.5))\n-# plt.annotate('', xy=(0, 1.1), xytext=(0, 0),\n-#              arrowprops=dict(facecolor='black', shrink=0.05, width=1.5))\n-\n-# plt.legend()\n-# plt.grid(False)\n-# plt.show()\n-\n-plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n-plt.yticks([-1,0,1,],[r'$-1$','$0$','$+1$','$+2$','$+3$'])\n-# plt.legend(['y','y2','y3'])\n-# plt.title('M10')\n-ax = plt.gca()#使用gca函数获取axes对象\n-ax.spines['right'].set_color('none')#右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n-ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n-ax.spines['left'].set_position(('data',0))\n-plt.show()\n # endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720493584528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,29 +88,8 @@\n # # 生成数据\n x = np.linspace(-1, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n-# # 绘图\n-# plt.figure(figsize=(10, 6))\n-# plt.plot(x, y, label='Piecewise Linear Function', color='blue')\n-# plt.title('Piecewise Linear Function')\n-# plt.xlabel('x')\n-# plt.ylabel('y')\n-\n-# # 添加坐标轴\n-# plt.axhline(0, color='black', linewidth=1.5)\n-# plt.axvline(0, color='black', linewidth=1.5)\n-\n-# # 添加箭头\n-# plt.annotate('', xy=(2, 0), xytext=(0, 0),\n-#              arrowprops=dict(facecolor='black', shrink=0.05, width=1.5))\n-# plt.annotate('', xy=(0, 1.1), xytext=(0, 0),\n-#              arrowprops=dict(facecolor='black', shrink=0.05, width=1.5))\n-\n-# plt.legend()\n-# plt.grid(False)\n-# plt.show()\n-\n plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n plt.yticks([-1,0,1,2],[-1,0,1,2])\n # plt.legend(['y','y2','y3'])\n"
                },
                {
                    "date": 1720493834900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,5 +101,37 @@\n ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n ax.spines['left'].set_position(('data',0))\n plt.show()\n-# endregion\n\\ No newline at end of file\n+# endregion\n+\n+\n+# 生成数据\n+x = np.linspace(-1, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+\n+# 设置刻度值\n+plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n+\n+# 使用 gca 函数获取 axes 对象\n+ax = plt.gca()\n+ax.spines['right'].set_color('none')  # 右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+ax.spines['left'].set_position(('data', 0))\n+\n+# 添加坐标轴箭头\n+plt.annotate('', xy=(2, 0), xytext=(0, 0),\n+             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+plt.annotate('', xy=(0, 2), xytext=(0, 0),\n+             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+\n+plt.title('Piecewise Linear Function')\n+plt.legend()\n+plt.show()\n"
                },
                {
                    "date": 1720493843437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,12 +104,8 @@\n plt.show()\n # endregion\n \n \n-# 生成数据\n-x = np.linspace(-1, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n # 绘图\n plt.figure(figsize=(10, 6))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n"
                },
                {
                    "date": 1720493878117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,21 +88,21 @@\n # # 生成数据\n x = np.linspace(-1, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n-plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n-plt.yticks([-1,0,1,2],[-1,0,1,2])\n-# plt.legend(['y','y2','y3'])\n-# plt.title('M10')\n-ax = plt.gca()#使用gca函数获取axes对象\n-ax.spines['right'].set_color('none')#右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n-ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n-ax.spines['left'].set_position(('data',0))\n-plt.show()\n+# plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n+# plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+# plt.yticks([-1,0,1,2],[-1,0,1,2])\n+# # plt.legend(['y','y2','y3'])\n+# # plt.title('M10')\n+# ax = plt.gca()#使用gca函数获取axes对象\n+# ax.spines['right'].set_color('none')#右侧边隐藏\n+# ax.spines['top'].set_color('none')\n+# ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n+# ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n+# ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n+# ax.spines['left'].set_position(('data',0))\n+# plt.show()\n # endregion\n \n \n # 绘图\n@@ -122,10 +122,9 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(0, 0),\n-             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n plt.annotate('', xy=(0, 2), xytext=(0, 0),\n              arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n \n plt.title('Piecewise Linear Function')\n"
                },
                {
                    "date": 1720493898411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \n \n # 绘图\n plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=3)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n@@ -123,10 +123,9 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n-plt.annotate('', xy=(0, 2), xytext=(0, 0),\n-             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+plt.annotate('', xy=(0, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n \n plt.title('Piecewise Linear Function')\n plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720493927248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# # 生成数据\n+x = np.linspace(-1, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n+# plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+# plt.yticks([-1,0,1,2],[-1,0,1,2])\n+# # plt.legend(['y','y2','y3'])\n+# # plt.title('M10')\n+# ax = plt.gca()#使用gca函数获取axes对象\n+# ax.spines['right'].set_color('none')#右侧边隐藏\n+# ax.spines['top'].set_color('none')\n+# ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n+# ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n+# ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n+# ax.spines['left'].set_position(('data',0))\n+# plt.show()\n+# endregion\n+\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=3)  # 增加线条粗细\n+\n+# 设置刻度值\n+plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.yticks([-1, 1, 2], [-1, 0, 1, 2])\n+\n+# 使用 gca 函数获取 axes 对象\n+ax = plt.gca()\n+ax.spines['right'].set_color('none')  # 右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+ax.spines['left'].set_position(('data', 0))\n+\n+# 添加坐标轴箭头\n+plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+plt.annotate('', xy=(0, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+\n+plt.title('Piecewise Linear Function')\n+plt.legend()\n+plt.show()\n"
                },
                {
                    "date": 1720493942065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,143 +106,12 @@\n \n \n # 绘图\n plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=3)  # 增加线条粗细\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([-1, 1, 2], [-1, 0, 1, 2])\n-\n-# 使用 gca 函数获取 axes 对象\n-ax = plt.gca()\n-ax.spines['right'].set_color('none')  # 右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-ax.spines['left'].set_position(('data', 0))\n-\n-# 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n-plt.annotate('', xy=(0, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n-\n-plt.title('Piecewise Linear Function')\n-plt.legend()\n-plt.show()\n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n-\n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n-\n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n-\n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# # 生成数据\n-x = np.linspace(-1, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-# plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n-# plt.yticks([-1,0,1,2],[-1,0,1,2])\n-# # plt.legend(['y','y2','y3'])\n-# # plt.title('M10')\n-# ax = plt.gca()#使用gca函数获取axes对象\n-# ax.spines['right'].set_color('none')#右侧边隐藏\n-# ax.spines['top'].set_color('none')\n-# ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n-# ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n-# ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n-# ax.spines['left'].set_position(('data',0))\n-# plt.show()\n-# endregion\n-\n-\n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=3)  # 增加线条粗细\n-\n-# 设置刻度值\n-plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n"
                },
                {
                    "date": 1720493953720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# # 生成数据\n+x = np.linspace(-1, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n+# plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+# plt.yticks([-1,0,1,2],[-1,0,1,2])\n+# # plt.legend(['y','y2','y3'])\n+# # plt.title('M10')\n+# ax = plt.gca()#使用gca函数获取axes对象\n+# ax.spines['right'].set_color('none')#右侧边隐藏\n+# ax.spines['top'].set_color('none')\n+# ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n+# ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n+# ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n+# ax.spines['left'].set_position(('data',0))\n+# plt.show()\n+# endregion\n+\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+\n+# 设置刻度值\n+plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n+\n+# 使用 gca 函数获取 axes 对象\n+ax = plt.gca()\n+ax.spines['right'].set_color('none')  # 右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+ax.spines['left'].set_position(('data', 0))\n+\n+# 添加坐标轴箭头\n+plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+plt.annotate('', xy=(0, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+\n+plt.title('Piecewise Linear Function')\n+plt.legend()\n+plt.show()\n"
                },
                {
                    "date": 1720494032592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,141 +122,10 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n-plt.annotate('', xy=(0, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n+plt.annotate('', xy=(0, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n \n plt.title('Piecewise Linear Function')\n plt.legend()\n plt.show()\n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n-\n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n-\n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n-\n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# # 生成数据\n-x = np.linspace(-1, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-# plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n-# plt.yticks([-1,0,1,2],[-1,0,1,2])\n-# # plt.legend(['y','y2','y3'])\n-# # plt.title('M10')\n-# ax = plt.gca()#使用gca函数获取axes对象\n-# ax.spines['right'].set_color('none')#右侧边隐藏\n-# ax.spines['top'].set_color('none')\n-# ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n-# ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n-# ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n-# ax.spines['left'].set_position(('data',0))\n-# plt.show()\n-# endregion\n-\n-\n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n-\n-# 设置刻度值\n-plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n-\n-# 使用 gca 函数获取 axes 对象\n-ax = plt.gca()\n-ax.spines['right'].set_color('none')  # 右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-ax.spines['left'].set_position(('data', 0))\n-\n-# 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n-plt.annotate('', xy=(0, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n-\n-plt.title('Piecewise Linear Function')\n-plt.legend()\n-plt.show()\n"
                },
                {
                    "date": 1720494056962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n-plt.annotate('', xy=(0, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n+plt.annotate('', xy=(-2, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n \n plt.title('Piecewise Linear Function')\n plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720494062772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n-plt.annotate('', xy=(-2, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n+plt.annotate('', xy=(0, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n \n plt.title('Piecewise Linear Function')\n plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720494072102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n+plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n plt.annotate('', xy=(0, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n \n plt.title('Piecewise Linear Function')\n plt.legend()\n"
                },
                {
                    "date": 1720494084379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n-plt.annotate('', xy=(0, 2), xytext=(0, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n+plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n \n plt.title('Piecewise Linear Function')\n plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720494104976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# # 生成数据\n+x = np.linspace(-1, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n+# plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+# plt.yticks([-1,0,1,2],[-1,0,1,2])\n+# # plt.legend(['y','y2','y3'])\n+# # plt.title('M10')\n+# ax = plt.gca()#使用gca函数获取axes对象\n+# ax.spines['right'].set_color('none')#右侧边隐藏\n+# ax.spines['top'].set_color('none')\n+# ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n+# ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n+# ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n+# ax.spines['left'].set_position(('data',0))\n+# plt.show()\n+# endregion\n+\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+\n+# 设置刻度值\n+plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n+\n+# 使用 gca 函数获取 axes 对象\n+ax = plt.gca()\n+ax.spines['right'].set_color('none')  # 右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+ax.spines['left'].set_position(('data', 0))\n+\n+# 添加坐标轴箭头\n+plt.annotate('', xy=(2, 0), xytext=(-2.2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n+plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n+\n+plt.title('Piecewise Linear Function')\n+plt.legend()\n+plt.show()\n"
                },
                {
                    "date": 1720494110221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,141 +122,10 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(-2.2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n-plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n+plt.annotate('', xy=(2.2, 0), xytext=(-2.2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n+plt.annotate('', xy=(0, 2.2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n \n plt.title('Piecewise Linear Function')\n plt.legend()\n plt.show()\n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n-\n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n-\n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n-\n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# # 生成数据\n-x = np.linspace(-1, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-# plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n-# plt.yticks([-1,0,1,2],[-1,0,1,2])\n-# # plt.legend(['y','y2','y3'])\n-# # plt.title('M10')\n-# ax = plt.gca()#使用gca函数获取axes对象\n-# ax.spines['right'].set_color('none')#右侧边隐藏\n-# ax.spines['top'].set_color('none')\n-# ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n-# ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n-# ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n-# ax.spines['left'].set_position(('data',0))\n-# plt.show()\n-# endregion\n-\n-\n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n-\n-# 设置刻度值\n-plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n-\n-# 使用 gca 函数获取 axes 对象\n-ax = plt.gca()\n-ax.spines['right'].set_color('none')  # 右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-ax.spines['left'].set_position(('data', 0))\n-\n-# 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1.5, headwidth=8))\n-plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n-\n-plt.title('Piecewise Linear Function')\n-plt.legend()\n-plt.show()\n"
                },
                {
                    "date": 1720494124571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# # 生成数据\n+x = np.linspace(-1, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n+# plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n+# plt.yticks([-1,0,1,2],[-1,0,1,2])\n+# # plt.legend(['y','y2','y3'])\n+# # plt.title('M10')\n+# ax = plt.gca()#使用gca函数获取axes对象\n+# ax.spines['right'].set_color('none')#右侧边隐藏\n+# ax.spines['top'].set_color('none')\n+# ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n+# ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n+# ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n+# ax.spines['left'].set_position(('data',0))\n+# plt.show()\n+# endregion\n+\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+\n+# 设置刻度值\n+plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n+\n+# 使用 gca 函数获取 axes 对象\n+ax = plt.gca()\n+ax.spines['right'].set_color('none')  # 右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+ax.spines['left'].set_position(('data', 0))\n+\n+# 添加坐标轴箭头\n+plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n+plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n+\n+plt.title('Piecewise Linear Function')\n+plt.legend()\n+plt.show()\n"
                },
                {
                    "date": 1720494154947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n+plt.yticks([-1, 0, 1, ], [-1, 0, 1, 2])\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n@@ -128,135 +128,4 @@\n \n plt.title('Piecewise Linear Function')\n plt.legend()\n plt.show()\n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n-\n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n-\n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n-\n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# # 生成数据\n-x = np.linspace(-1, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-# plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n-# plt.yticks([-1,0,1,2],[-1,0,1,2])\n-# # plt.legend(['y','y2','y3'])\n-# # plt.title('M10')\n-# ax = plt.gca()#使用gca函数获取axes对象\n-# ax.spines['right'].set_color('none')#右侧边隐藏\n-# ax.spines['top'].set_color('none')\n-# ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n-# ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n-# ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n-# ax.spines['left'].set_position(('data',0))\n-# plt.show()\n-# endregion\n-\n-\n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n-\n-# 设置刻度值\n-plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n-\n-# 使用 gca 函数获取 axes 对象\n-ax = plt.gca()\n-ax.spines['right'].set_color('none')  # 右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-ax.spines['left'].set_position(('data', 0))\n-\n-# 添加坐标轴箭头\n-plt.annotate('', xy=(2.2, 0), xytext=(-2.2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n-plt.annotate('', xy=(0, 2.2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n-\n-plt.title('Piecewise Linear Function')\n-plt.legend()\n-plt.show()\n"
                },
                {
                    "date": 1720494168353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1, ], [-1, 0, 1, 2])\n+plt.yticks([-1, 0, 1], [-1, 0, 1])\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n@@ -125,7 +125,7 @@\n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n \n-plt.title('Piecewise Linear Function')\n+# plt.title('Piecewise Linear Function')\n plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720494185910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1], [-1, 0, 1])\n+plt.yticks([-1, 0, 1, 2], [-1, 0, 1])\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n@@ -126,6 +126,6 @@\n plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n \n # plt.title('Piecewise Linear Function')\n-plt.legend()\n+# plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720494213560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1, 2], [-1, 0, 1])\n+plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n@@ -122,9 +122,9 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n+plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=0.8, headwidth=8))\n plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n"
                },
                {
                    "date": 1720494225526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \n \n # 绘图\n plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.2)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n@@ -123,9 +123,9 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=0.8, headwidth=8))\n-plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=1, headwidth=8))\n+plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=0.8, headwidth=8))\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720494242758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=0.8, headwidth=8))\n+plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=0.8, headwidth=8))\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n"
                },
                {
                    "date": 1720494280674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n     else:\n         return x\n \n # # 生成数据\n-x = np.linspace(-1, 2, 400)\n+x = np.linspace(-2, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n # plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n@@ -123,9 +123,9 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n-plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=0.8, headwidth=8))\n+plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720494302068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,21 +88,8 @@\n # # 生成数据\n x = np.linspace(-2, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n-# plt.plot(x,y)#绘制,matplotlib默认展示不同的颜色\n-# plt.xticks([-2,-1,0,1,2],[-2,-1,0,1,2])#显示横坐标刻度值，不加第二个参数，将显示的是数值而不是字母\n-# plt.yticks([-1,0,1,2],[-1,0,1,2])\n-# # plt.legend(['y','y2','y3'])\n-# # plt.title('M10')\n-# ax = plt.gca()#使用gca函数获取axes对象\n-# ax.spines['right'].set_color('none')#右侧边隐藏\n-# ax.spines['top'].set_color('none')\n-# ax.xaxis.set_ticks_position('bottom')#将底边设为横坐标\n-# ax.spines['bottom'].set_position(('data',0))#将坐标置于坐标0处\n-# ax.yaxis.set_ticks_position('left')#左边设置为纵坐标\n-# ax.spines['left'].set_position(('data',0))\n-# plt.show()\n # endregion\n \n \n # 绘图\n"
                },
                {
                    "date": 1720494307773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,11 +88,8 @@\n # # 生成数据\n x = np.linspace(-2, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n-# endregion\n-\n-\n # 绘图\n plt.figure(figsize=(10, 6))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.2)  # 增加线条粗细\n \n@@ -115,4 +112,5 @@\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n+# endregion\n"
                },
                {
                    "date": 1720494314084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-2, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.2)  # 增加线条粗细\n+\n+# 设置刻度值\n+plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n+\n+# 使用 gca 函数获取 axes 对象\n+ax = plt.gca()\n+ax.spines['right'].set_color('none')  # 右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+ax.spines['left'].set_position(('data', 0))\n+\n+# 添加坐标轴箭头\n+plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n+plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n+\n+# plt.title('Piecewise Linear Function')\n+# plt.legend()\n+plt.show()\n+# endregion\n"
                },
                {
                    "date": 1720494458289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,124 +109,11 @@\n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n \n-# plt.title('Piecewise Linear Function')\n-# plt.legend()\n-plt.show()\n-# endregion\n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n \n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n \n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n \n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# # 生成数据\n-x = np.linspace(-2, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.2)  # 增加线条粗细\n-\n-# 设置刻度值\n-plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n-\n-# 使用 gca 函数获取 axes 对象\n-ax = plt.gca()\n-ax.spines['right'].set_color('none')  # 右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-ax.spines['left'].set_position(('data', 0))\n-\n-# 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n-plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n-\n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n # endregion\n"
                },
                {
                    "date": 1720494464735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,15 +88,31 @@\n # 生成数据\n x = np.linspace(-2, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+# 定义分段函数\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-1, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n # 绘图\n plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.2)  # 增加线条粗细\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1, 2], [-1, 0, 1, 2])\n+plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n@@ -106,14 +122,17 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n-plt.annotate('', xy=(0, 2), xytext=(0, -2), arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n+plt.annotate('', xy=(2, 0), xytext=(0, 0),\n+             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+plt.annotate('', xy=(0, 1), xytext=(0, 0),\n+             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n \n+plt.title('Piecewise Linear Function')\n+plt.legend()\n+plt.show()\n \n-\n-\n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n # endregion\n"
                },
                {
                    "date": 1720494559582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n+plt.yticks([ 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n"
                },
                {
                    "date": 1720494585102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,11 @@\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([ 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n+plt.yticks([0, 1], [0, 1])  # 不显示刻度2，只显示到-1\n+plt.xlim(xmin,xmax)\n+plt.ylim(ymin,ymax)\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n"
                },
                {
                    "date": 1720494591165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n     else:\n         return x\n \n # 生成数据\n-x = np.linspace(-1, 2, 400)\n+x = np.linspace(-2, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 6))\n@@ -111,9 +111,9 @@\n \n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n plt.yticks([0, 1], [0, 1])  # 不显示刻度2，只显示到-1\n-plt.xlim(xmin,xmax)\n+plt.xlim(-2,xmax)\n plt.ylim(ymin,ymax)\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n"
                },
                {
                    "date": 1720494596447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,10 +111,10 @@\n \n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n plt.yticks([0, 1], [0, 1])  # 不显示刻度2，只显示到-1\n-plt.xlim(-2,xmax)\n-plt.ylim(ymin,ymax)\n+plt.xlim(-2,2)\n+plt.ylim(-0/5,ymax)\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n"
                },
                {
                    "date": 1720494601489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-2, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+# 定义分段函数\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-2, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+\n+# 设置刻度值\n+plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.yticks([0, 1], [0, 1])  # 不显示刻度2，只显示到-1\n+plt.xlim(-2,2)\n+plt.ylim(-0.5,ymax)\n+\n+# 使用 gca 函数获取 axes 对象\n+ax = plt.gca()\n+ax.spines['right'].set_color('none')  # 右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+ax.spines['left'].set_position(('data', 0))\n+\n+# 添加坐标轴箭头\n+plt.annotate('', xy=(2, 0), xytext=(0, 0),\n+             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+plt.annotate('', xy=(0, 1), xytext=(0, 0),\n+             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+\n+plt.title('Piecewise Linear Function')\n+plt.legend()\n+plt.show()\n+\n+# plt.title('Piecewise Linear Function')\n+# plt.legend()\n+plt.show()\n+# endregion\n"
                },
                {
                    "date": 1720494625718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n plt.yticks([0, 1], [0, 1])  # 不显示刻度2，只显示到-1\n plt.xlim(-2,2)\n-plt.ylim(-0.5,ymax)\n+plt.ylim(-0.5, 1.2)\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n@@ -129,152 +129,12 @@\n              arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n plt.annotate('', xy=(0, 1), xytext=(0, 0),\n              arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n \n-plt.title('Piecewise Linear Function')\n-plt.legend()\n-plt.show()\n-\n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n-# endregion\n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n \n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n-\n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n-\n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# 生成数据\n-x = np.linspace(-2, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-import numpy as np\n-import matplotlib.pyplot as plt\n-\n-# 定义分段函数\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# 生成数据\n-x = np.linspace(-2, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n-\n-# 设置刻度值\n-plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([0, 1], [0, 1])  # 不显示刻度2，只显示到-1\n-plt.xlim(-2,2)\n-plt.ylim(-0/5,ymax)\n-\n-# 使用 gca 函数获取 axes 对象\n-ax = plt.gca()\n-ax.spines['right'].set_color('none')  # 右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-ax.spines['left'].set_position(('data', 0))\n-\n-# 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(0, 0),\n-             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n-plt.annotate('', xy=(0, 1), xytext=(0, 0),\n-             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n-\n-plt.title('Piecewise Linear Function')\n-plt.legend()\n-plt.show()\n-\n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n # endregion\n"
                },
                {
                    "date": 1720494633029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,11 +125,11 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(0, 0),\n-             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+             arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n plt.annotate('', xy=(0, 1), xytext=(0, 0),\n-             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+             arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720494650223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n \n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(0, 0),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n-plt.annotate('', xy=(0, 1), xytext=(0, 0),\n+plt.annotate('', xy=(0, 1.2), xytext=(0, 0),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n"
                },
                {
                    "date": 1720494663438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n \n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(0, 0),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n-plt.annotate('', xy=(0, 1.2), xytext=(0, 0),\n+plt.annotate('', xy=(0, 1.2), xytext=(0, -),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n"
                },
                {
                    "date": 1720494669084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n \n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(0, 0),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n-plt.annotate('', xy=(0, 1.2), xytext=(0, -),\n+plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n"
                },
                {
                    "date": 1720494678577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(0, 0),\n+plt.annotate('', xy=(2.1, 0), xytext=(-2, 0),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n \n"
                },
                {
                    "date": 1720494690553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n-plt.annotate('', xy=(2.1, 0), xytext=(-2, 0),\n+plt.annotate('', xy=(2, 0), xytext=(-2, 0),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n \n"
                },
                {
                    "date": 1720494717412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n plt.figure(figsize=(10, 6))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n-plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.xticks([-1, 0, 1, 2], [-2, -1, 0, 1, 2])\n plt.yticks([0, 1], [0, 1])  # 不显示刻度2，只显示到-1\n plt.xlim(-2,2)\n plt.ylim(-0.5, 1.2)\n \n"
                },
                {
                    "date": 1720494722950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n plt.figure(figsize=(10, 6))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n-plt.xticks([-1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.xticks([-1, 0, 1], [-1, 0, 1, 2])\n plt.yticks([0, 1], [0, 1])  # 不显示刻度2，只显示到-1\n plt.xlim(-2,2)\n plt.ylim(-0.5, 1.2)\n \n"
                },
                {
                    "date": 1720494759043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n plt.figure(figsize=(10, 6))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n-plt.xticks([-1, 0, 1], [-1, 0, 1, 2])\n+plt.xticks([-1, 0, 1], [-1, 0, 1])\n plt.yticks([0, 1], [0, 1])  # 不显示刻度2，只显示到-1\n plt.xlim(-2,2)\n plt.ylim(-0.5, 1.2)\n \n@@ -125,11 +125,11 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(-2, 0),\n-             arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n+             arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n-             arrowprops=dict(facecolor='black', shrink=0.005, width=0.5, headwidth=8))\n+             arrowprops=dict(facecolor='black', shrink=0.005, width=0.35, headwidth=8))\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720494782749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-1, 0, 1], [-1, 0, 1])\n-plt.yticks([0, 1], [0, 1])  # 不显示刻度2，只显示到-1\n+plt.yticks([0, 1], [0, 1]) \n plt.xlim(-2,2)\n plt.ylim(-0.5, 1.2)\n \n # 使用 gca 函数获取 axes 对象\n@@ -127,9 +127,9 @@\n # 添加坐标轴箭头\n plt.annotate('', xy=(2, 0), xytext=(-2, 0),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n-             arrowprops=dict(facecolor='black', shrink=0.005, width=0.35, headwidth=8))\n+             arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720494807039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n \n # 设置刻度值\n plt.xticks([-1, 0, 1], [-1, 0, 1])\n plt.yticks([0, 1], [0, 1]) \n-plt.xlim(-2,2)\n+plt.xlim(-2.1,2)\n plt.ylim(-0.5, 1.2)\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n"
                },
                {
                    "date": 1720494813319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n \n # 设置刻度值\n plt.xticks([-1, 0, 1], [-1, 0, 1])\n plt.yticks([0, 1], [0, 1]) \n-plt.xlim(-2.1,2)\n+plt.xlim(-2.1,2.1)\n plt.ylim(-0.5, 1.2)\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n@@ -124,9 +124,9 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n-plt.annotate('', xy=(2, 0), xytext=(-2, 0),\n+plt.annotate('', xy=(2.1, 0), xytext=(-2, 0),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n \n"
                },
                {
                    "date": 1720494982481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,17 +124,13 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 添加坐标轴箭头\n-plt.annotate('', xy=(2.1, 0), xytext=(-2, 0),\n+plt.annotate('', xy=(2.1, 0), xytext=(-2.1, 0),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n-\n-# plt.title('Piecewise Linear Function')\n-# plt.legend()\n-plt.show()\n # endregion\n"
                },
                {
                    "date": 1720494995828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,19 +76,9 @@\n \n \n # region \n # x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n \n-# 生成数据\n-x = np.linspace(-2, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n \n import numpy as np\n import matplotlib.pyplot as plt\n \n"
                },
                {
                    "date": 1720495001355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,13 +76,8 @@\n \n \n # region \n # x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-\n-\n-import numpy as np\n-import matplotlib.pyplot as plt\n-\n # 定义分段函数\n def piecewise_linear_function(x):\n     if x < 0:\n         return 0\n"
                },
                {
                    "date": 1720495008923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,46 +76,45 @@\n \n \n # region \n # x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-# 定义分段函数\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n+# def piecewise_linear_function(x):\n+#     if x < 0:\n+#         return 0\n+#     elif x > 1:\n+#         return 1\n+#     else:\n+#         return x\n \n-# 生成数据\n-x = np.linspace(-2, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n+# # 生成数据\n+# x = np.linspace(-2, 2, 400)\n+# y = np.array([piecewise_linear_function(xi) for xi in x])\n \n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+# # 绘图\n+# plt.figure(figsize=(10, 6))\n+# plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n-# 设置刻度值\n-plt.xticks([-1, 0, 1], [-1, 0, 1])\n-plt.yticks([0, 1], [0, 1]) \n-plt.xlim(-2.1,2.1)\n-plt.ylim(-0.5, 1.2)\n+# # 设置刻度值\n+# plt.xticks([-1, 0, 1], [-1, 0, 1])\n+# plt.yticks([0, 1], [0, 1]) \n+# plt.xlim(-2.1,2.1)\n+# plt.ylim(-0.5, 1.2)\n \n-# 使用 gca 函数获取 axes 对象\n-ax = plt.gca()\n-ax.spines['right'].set_color('none')  # 右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-ax.spines['left'].set_position(('data', 0))\n+# # 使用 gca 函数获取 axes 对象\n+# ax = plt.gca()\n+# ax.spines['right'].set_color('none')  # 右侧边隐藏\n+# ax.spines['top'].set_color('none')\n+# ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+# ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+# ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+# ax.spines['left'].set_position(('data', 0))\n \n-# 添加坐标轴箭头\n-plt.annotate('', xy=(2.1, 0), xytext=(-2.1, 0),\n-             arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n-plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n-             arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n+# # 添加坐标轴箭头\n+# plt.annotate('', xy=(2.1, 0), xytext=(-2.1, 0),\n+#              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n+# plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n+#              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n \n-# plt.title('Piecewise Linear Function')\n-# plt.legend()\n-plt.show()\n+# # plt.title('Piecewise Linear Function')\n+# # plt.legend()\n+# plt.show()\n # endregion\n"
                },
                {
                    "date": 1720495016392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,4 +117,46 @@\n # # plt.title('Piecewise Linear Function')\n # # plt.legend()\n # plt.show()\n # endregion\n+# 定义分段函数\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-2, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+\n+# 设置刻度值\n+plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n+\n+# 使用 gca 函数获取 axes 对象\n+ax = plt.gca()\n+ax.spines['right'].set_color('none')  # 右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+ax.spines['left'].set_position(('data', 0))\n+\n+# 调整坐标轴箭头\n+arrowprops = dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8)\n+plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=arrowprops)\n+plt.annotate('', xy=(0, 1), xytext=(0, 0), arrowprops=arrowprops)\n+\n+# 设置轴范围\n+plt.xlim(-1.5, 2.5)\n+plt.ylim(-0.5, 1.5)\n+\n+plt.title('Piecewise Linear Function')\n+plt.legend()\n+plt.show()\n"
                },
                {
                    "date": 1720495036155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,7 +156,7 @@\n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n \n-plt.title('Piecewise Linear Function')\n-plt.legend()\n+# plt.title('Piecewise Linear Function')\n+# plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720495044455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+# def piecewise_linear_function(x):\n+#     if x < 0:\n+#         return 0\n+#     elif x > 1:\n+#         return 1\n+#     else:\n+#         return x\n+\n+# # 生成数据\n+# x = np.linspace(-2, 2, 400)\n+# y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# # 绘图\n+# plt.figure(figsize=(10, 6))\n+# plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+\n+# # 设置刻度值\n+# plt.xticks([-1, 0, 1], [-1, 0, 1])\n+# plt.yticks([0, 1], [0, 1]) \n+# plt.xlim(-2.1,2.1)\n+# plt.ylim(-0.5, 1.2)\n+\n+# # 使用 gca 函数获取 axes 对象\n+# ax = plt.gca()\n+# ax.spines['right'].set_color('none')  # 右侧边隐藏\n+# ax.spines['top'].set_color('none')\n+# ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+# ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+# ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+# ax.spines['left'].set_position(('data', 0))\n+\n+# # 添加坐标轴箭头\n+# plt.annotate('', xy=(2.1, 0), xytext=(-2.1, 0),\n+#              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n+# plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n+#              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n+\n+# # plt.title('Piecewise Linear Function')\n+# # plt.legend()\n+# plt.show()\n+# endregion\n+# 定义分段函数\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-2, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+\n+# 设置刻度值\n+plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n+\n+# 使用 gca 函数获取 axes 对象\n+ax = plt.gca()\n+ax.spines['right'].set_color('none')  # 右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+ax.spines['left'].set_position(('data', 0))\n+\n+# 调整坐标轴箭头\n+arrowprops = dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8)\n+plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=arrowprops)\n+plt.annotate('', xy=(0, 1), xytext=(0, 0), arrowprops=arrowprops)\n+\n+# 设置轴范围\n+plt.xlim(-1.5, 2.5)\n+plt.ylim(-0.5, 1.5)\n+\n+# plt.title('Piecewise Linear Function')\n+# plt.legend()\n+plt.show()\n"
                },
                {
                    "date": 1720495053862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,177 +148,15 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n-arrowprops = dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8)\n-plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=arrowprops)\n-plt.annotate('', xy=(0, 1), xytext=(0, 0), arrowprops=arrowprops)\n+arrowprops = dict(facecolor='black', shrink=0.05, width=0.05, headwidth=8)\n+plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=arrowprops)\n+plt.annotate('', xy=(0, 1), xytext=(0, -1), arrowprops=arrowprops)\n \n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n-\n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n-\n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n-\n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-# def piecewise_linear_function(x):\n-#     if x < 0:\n-#         return 0\n-#     elif x > 1:\n-#         return 1\n-#     else:\n-#         return x\n-\n-# # 生成数据\n-# x = np.linspace(-2, 2, 400)\n-# y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# # 绘图\n-# plt.figure(figsize=(10, 6))\n-# plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n-\n-# # 设置刻度值\n-# plt.xticks([-1, 0, 1], [-1, 0, 1])\n-# plt.yticks([0, 1], [0, 1]) \n-# plt.xlim(-2.1,2.1)\n-# plt.ylim(-0.5, 1.2)\n-\n-# # 使用 gca 函数获取 axes 对象\n-# ax = plt.gca()\n-# ax.spines['right'].set_color('none')  # 右侧边隐藏\n-# ax.spines['top'].set_color('none')\n-# ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-# ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-# ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-# ax.spines['left'].set_position(('data', 0))\n-\n-# # 添加坐标轴箭头\n-# plt.annotate('', xy=(2.1, 0), xytext=(-2.1, 0),\n-#              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n-# plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n-#              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n-\n-# # plt.title('Piecewise Linear Function')\n-# # plt.legend()\n-# plt.show()\n-# endregion\n-# 定义分段函数\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# 生成数据\n-x = np.linspace(-2, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n-\n-# 设置刻度值\n-plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n-\n-# 使用 gca 函数获取 axes 对象\n-ax = plt.gca()\n-ax.spines['right'].set_color('none')  # 右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-ax.spines['left'].set_position(('data', 0))\n-\n-# 调整坐标轴箭头\n-arrowprops = dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8)\n-plt.annotate('', xy=(2, 0), xytext=(0, 0), arrowprops=arrowprops)\n-plt.annotate('', xy=(0, 1), xytext=(0, 0), arrowprops=arrowprops)\n-\n-# 设置轴范围\n-plt.xlim(-1.5, 2.5)\n-plt.ylim(-0.5, 1.5)\n-\n-# plt.title('Piecewise Linear Function')\n-# plt.legend()\n-plt.show()\n"
                },
                {
                    "date": 1720495069162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n plt.figure(figsize=(10, 6))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n-plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.xticks([-1, 0, 1, 2], [-2, -1, 0, 1, 2])\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n"
                },
                {
                    "date": 1720495091787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n plt.figure(figsize=(10, 6))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n-plt.xticks([-1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.xticks([-1, 0, 1], [ -1, 0, 1])\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n"
                },
                {
                    "date": 1720495098135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n \n # 调整坐标轴箭头\n arrowprops = dict(facecolor='black', shrink=0.05, width=0.05, headwidth=8)\n plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=arrowprops)\n-plt.annotate('', xy=(0, 1), xytext=(0, -1), arrowprops=arrowprops)\n+plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n"
                },
                {
                    "date": 1720495121388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n \n # 调整坐标轴箭头\n arrowprops = dict(facecolor='black', shrink=0.05, width=0.05, headwidth=8)\n plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=arrowprops)\n-plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5), arrowprops=arrowprops)\n+plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n"
                },
                {
                    "date": 1720495141128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n arrowprops = dict(facecolor='black', shrink=0.05, width=0.05, headwidth=8)\n-plt.annotate('', xy=(2, 0), xytext=(-2, 0), arrowprops=arrowprops)\n+plt.annotate('', xy=(2.5, 0), xytext=(-2, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n"
                },
                {
                    "date": 1720495157429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n plt.annotate('', xy=(2.5, 0), xytext=(-2, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n-plt.xlim(-1.5, 2.5)\n+plt.xlim(-1.5, 2)\n plt.ylim(-0.5, 1.5)\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n"
                },
                {
                    "date": 1720495170974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n plt.annotate('', xy=(2.5, 0), xytext=(-2, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n-plt.xlim(-1.5, 2)\n+plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n"
                },
                {
                    "date": 1720495181558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n-arrowprops = dict(facecolor='black', shrink=0.05, width=0.05, headwidth=8)\n+arrowprops = dict(facecolor='black', shrink=0.05, width=0.005, headwidth=8)\n plt.annotate('', xy=(2.5, 0), xytext=(-2, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n"
                },
                {
                    "date": 1720495285119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,45 +118,4 @@\n # # plt.legend()\n # plt.show()\n # endregion\n # 定义分段函数\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# 生成数据\n-x = np.linspace(-2, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# 绘图\n-plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n-\n-# 设置刻度值\n-plt.xticks([-1, 0, 1], [ -1, 0, 1])\n-plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n-\n-# 使用 gca 函数获取 axes 对象\n-ax = plt.gca()\n-ax.spines['right'].set_color('none')  # 右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-ax.spines['left'].set_position(('data', 0))\n-\n-# 调整坐标轴箭头\n-arrowprops = dict(facecolor='black', shrink=0.05, width=0.005, headwidth=8)\n-plt.annotate('', xy=(2.5, 0), xytext=(-2, 0), arrowprops=arrowprops)\n-plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n-\n-# 设置轴范围\n-plt.xlim(-1.5, 2.5)\n-plt.ylim(-0.5, 1.5)\n-\n-# plt.title('Piecewise Linear Function')\n-# plt.legend()\n-plt.show()\n"
                },
                {
                    "date": 1720495290971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+# def piecewise_linear_function(x):\n+#     if x < 0:\n+#         return 0\n+#     elif x > 1:\n+#         return 1\n+#     else:\n+#         return x\n+\n+# # 生成数据\n+# x = np.linspace(-2, 2, 400)\n+# y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# # 绘图\n+# plt.figure(figsize=(10, 6))\n+# plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+\n+# # 设置刻度值\n+# plt.xticks([-1, 0, 1], [-1, 0, 1])\n+# plt.yticks([0, 1], [0, 1]) \n+# plt.xlim(-2.1,2.1)\n+# plt.ylim(-0.5, 1.2)\n+\n+# # 使用 gca 函数获取 axes 对象\n+# ax = plt.gca()\n+# ax.spines['right'].set_color('none')  # 右侧边隐藏\n+# ax.spines['top'].set_color('none')\n+# ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+# ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+# ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+# ax.spines['left'].set_position(('data', 0))\n+\n+# # 添加坐标轴箭头\n+# plt.annotate('', xy=(2.1, 0), xytext=(-2.1, 0),\n+#              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n+# plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n+#              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n+\n+# # plt.title('Piecewise Linear Function')\n+# # plt.legend()\n+# plt.show()\n+# endregion\n+\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+# 定义分段函数\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-2, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# 绘图\n+plt.figure(figsize=(10, 6))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+\n+# 设置刻度值\n+plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n+\n+# 使用 gca 函数获取 axes 对象并隐藏默认轴\n+ax = plt.gca()\n+ax.spines['right'].set_color('none')  # 右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.spines['bottom'].set_color('none')  # 底边隐藏\n+ax.spines['left'].set_color('none')\n+ax.xaxis.set_ticks_position('none')  # 不显示默认底边\n+ax.yaxis.set_ticks_position('none')  # 不显示默认左边\n+\n+# 手动添加 x 轴和 y 轴\n+plt.plot([-1.5, 2.5], [0, 0], color='black', linewidth=1.5)\n+plt.plot([0, 0], [-0.5, 1.5], color='black', linewidth=1.5)\n+\n+# 添加坐标轴箭头\n+plt.annotate('', xy=(2.5, 0), xytext=(0, 0),\n+             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+plt.annotate('', xy=(0, 1.5), xytext=(0, 0),\n+             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n+\n+# 设置轴范围\n+plt.xlim(-1.5, 2.5)\n+plt.ylim(-0.5, 1.5)\n+\n+plt.title('Piecewise Linear Function')\n+plt.legend()\n+plt.show()\n+\n"
                },
                {
                    "date": 1720495300286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n     else:\n         return x\n \n # 生成数据\n-x = np.linspace(-2, 2, 400)\n+x = np.linspace(-1, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 6))\n@@ -169,125 +169,4 @@\n plt.title('Piecewise Linear Function')\n plt.legend()\n plt.show()\n \n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n-\n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n-\n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n-\n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-# def piecewise_linear_function(x):\n-#     if x < 0:\n-#         return 0\n-#     elif x > 1:\n-#         return 1\n-#     else:\n-#         return x\n-\n-# # 生成数据\n-# x = np.linspace(-2, 2, 400)\n-# y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# # 绘图\n-# plt.figure(figsize=(10, 6))\n-# plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n-\n-# # 设置刻度值\n-# plt.xticks([-1, 0, 1], [-1, 0, 1])\n-# plt.yticks([0, 1], [0, 1]) \n-# plt.xlim(-2.1,2.1)\n-# plt.ylim(-0.5, 1.2)\n-\n-# # 使用 gca 函数获取 axes 对象\n-# ax = plt.gca()\n-# ax.spines['right'].set_color('none')  # 右侧边隐藏\n-# ax.spines['top'].set_color('none')\n-# ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-# ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-# ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-# ax.spines['left'].set_position(('data', 0))\n-\n-# # 添加坐标轴箭头\n-# plt.annotate('', xy=(2.1, 0), xytext=(-2.1, 0),\n-#              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n-# plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n-#              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n-\n-# # plt.title('Piecewise Linear Function')\n-# # plt.legend()\n-# plt.show()\n-# endregion\n-# 定义分段函数\n"
                },
                {
                    "date": 1720495320081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,12 +117,8 @@\n # # plt.title('Piecewise Linear Function')\n # # plt.legend()\n # plt.show()\n # endregion\n-\n-import numpy as np\n-import matplotlib.pyplot as plt\n-\n # 定义分段函数\n def piecewise_linear_function(x):\n     if x < 0:\n         return 0\n@@ -131,42 +127,36 @@\n     else:\n         return x\n \n # 生成数据\n-x = np.linspace(-1, 2, 400)\n+x = np.linspace(-2, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 6))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n \n # 设置刻度值\n-plt.xticks([-2, -1, 0, 1, 2], [-2, -1, 0, 1, 2])\n+plt.xticks([-1, 0, 1], [ -1, 0, 1])\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n-# 使用 gca 函数获取 axes 对象并隐藏默认轴\n+# 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n ax.spines['top'].set_color('none')\n-ax.spines['bottom'].set_color('none')  # 底边隐藏\n-ax.spines['left'].set_color('none')\n-ax.xaxis.set_ticks_position('none')  # 不显示默认底边\n-ax.yaxis.set_ticks_position('none')  # 不显示默认左边\n+ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+ax.spines['left'].set_position(('data', 0))\n \n-# 手动添加 x 轴和 y 轴\n-plt.plot([-1.5, 2.5], [0, 0], color='black', linewidth=1.5)\n-plt.plot([0, 0], [-0.5, 1.5], color='black', linewidth=1.5)\n+# 调整坐标轴箭头\n+arrowprops = dict(facecolor='black', shrink=0.05, width=0.005, headwidth=8)\n+plt.annotate('', xy=(2.5, 0), xytext=(-2, 0), arrowprops=arrowprops)\n+plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n-# 添加坐标轴箭头\n-plt.annotate('', xy=(2.5, 0), xytext=(0, 0),\n-             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n-plt.annotate('', xy=(0, 1.5), xytext=(0, 0),\n-             arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8))\n-\n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n \n-plt.title('Piecewise Linear Function')\n-plt.legend()\n+# plt.title('Piecewise Linear Function')\n+# plt.legend()\n plt.show()\n-\n"
                },
                {
                    "date": 1720495326080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n \n # # plt.title('Piecewise Linear Function')\n # # plt.legend()\n # plt.show()\n-# endregion\n+\n # 定义分段函数\n def piecewise_linear_function(x):\n     if x < 0:\n         return 0\n"
                },
                {
                    "date": 1720495334436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,51 +75,8 @@\n \n \n \n # region \n-# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-# def piecewise_linear_function(x):\n-#     if x < 0:\n-#         return 0\n-#     elif x > 1:\n-#         return 1\n-#     else:\n-#         return x\n-\n-# # 生成数据\n-# x = np.linspace(-2, 2, 400)\n-# y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# # 绘图\n-# plt.figure(figsize=(10, 6))\n-# plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n-\n-# # 设置刻度值\n-# plt.xticks([-1, 0, 1], [-1, 0, 1])\n-# plt.yticks([0, 1], [0, 1]) \n-# plt.xlim(-2.1,2.1)\n-# plt.ylim(-0.5, 1.2)\n-\n-# # 使用 gca 函数获取 axes 对象\n-# ax = plt.gca()\n-# ax.spines['right'].set_color('none')  # 右侧边隐藏\n-# ax.spines['top'].set_color('none')\n-# ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-# ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-# ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-# ax.spines['left'].set_position(('data', 0))\n-\n-# # 添加坐标轴箭头\n-# plt.annotate('', xy=(2.1, 0), xytext=(-2.1, 0),\n-#              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n-# plt.annotate('', xy=(0, 1.2), xytext=(0, -0.5),\n-#              arrowprops=dict(facecolor='black', shrink=0.005, width=0.3, headwidth=8))\n-\n-# # plt.title('Piecewise Linear Function')\n-# # plt.legend()\n-# plt.show()\n-\n-# 定义分段函数\n def piecewise_linear_function(x):\n     if x < 0:\n         return 0\n     elif x > 1:\n@@ -159,4 +116,5 @@\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n+# endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720495342309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,10 @@\n \n \n \n # region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+# 定义分段函数\n def piecewise_linear_function(x):\n     if x < 0:\n         return 0\n     elif x > 1:\n"
                },
                {
                    "date": 1720495385733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2)  # 增加线条粗细\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=3)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-1, 0, 1], [ -1, 0, 1])\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n"
                },
                {
                    "date": 1720495397424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 6))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=3)  # 增加线条粗细\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-1, 0, 1], [ -1, 0, 1])\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n"
                },
                {
                    "date": 1720495480440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n plt.figure(figsize=(10, 6))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n # 设置刻度值\n-plt.xticks([-1, 0, 1], [ -1, 0, 1])\n+plt.xticks([-1, 0, 1], [ -1, 0, 1, 2])\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n"
                },
                {
                    "date": 1720495538727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n plt.figure(figsize=(10, 6))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n # 设置刻度值\n-plt.xticks([-1, 0, 1], [ -1, 0, 1, 2])\n+plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n@@ -108,9 +108,9 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n arrowprops = dict(facecolor='black', shrink=0.05, width=0.005, headwidth=8)\n-plt.annotate('', xy=(2.5, 0), xytext=(-2, 0), arrowprops=arrowprops)\n+plt.annotate('', xy=(2.5, 0), xytext=(-1.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n"
                },
                {
                    "date": 1720495555522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n arrowprops = dict(facecolor='black', shrink=0.05, width=0.005, headwidth=8)\n-plt.annotate('', xy=(2.5, 0), xytext=(-1.5, 0), arrowprops=arrowprops)\n+plt.annotate('', xy=(2, 0), xytext=(-1.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n"
                },
                {
                    "date": 1720495568472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n arrowprops = dict(facecolor='black', shrink=0.05, width=0.005, headwidth=8)\n-plt.annotate('', xy=(2, 0), xytext=(-1.5, 0), arrowprops=arrowprops)\n+plt.annotate('', xy=(2.5, 0), xytext=(-1.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n"
                },
                {
                    "date": 1720495643601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,11 +107,11 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n-arrowprops = dict(facecolor='black', shrink=0.05, width=0.005, headwidth=8)\n-plt.annotate('', xy=(2.5, 0), xytext=(-1.5, 0), arrowprops=arrowprops)\n-plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n+# arrowprops = dict(facecolor='black', shrink=0.05, width=0.005, headwidth=8)\n+# plt.annotate('', xy=(2.5, 0), xytext=(-1.5, 0), arrowprops=arrowprops)\n+# plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n"
                },
                {
                    "date": 1720495661933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,14 +107,14 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n-# arrowprops = dict(facecolor='black', shrink=0.05, width=0.005, headwidth=8)\n-# plt.annotate('', xy=(2.5, 0), xytext=(-1.5, 0), arrowprops=arrowprops)\n-# plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n+arrowprops = dict(facecolor='black', shrink=0.05, width=0.005, headwidth=8)\n+plt.annotate('', xy=(2.5, 0), xytext=(-1.5, 0), arrowprops=arrowprops)\n+plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n-plt.xlim(-1.5, 2.5)\n+plt.xlim(-1.5, 5)\n plt.ylim(-0.5, 1.5)\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n"
                },
                {
                    "date": 1720495695614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n arrowprops = dict(facecolor='black', shrink=0.05, width=0.005, headwidth=8)\n-plt.annotate('', xy=(2.5, 0), xytext=(-1.5, 0), arrowprops=arrowprops)\n+plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n plt.xlim(-1.5, 5)\n"
                },
                {
                    "date": 1720495776390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n-plt.xlim(-1.5, 5)\n+plt.xlim(-1.5, 2)\n plt.ylim(-0.5, 1.5)\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n"
                },
                {
                    "date": 1720495788666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n-plt.xlim(-1.5, 2)\n+plt.xlim(-1.5, 2.2)\n plt.ylim(-0.5, 1.5)\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n"
                },
                {
                    "date": 1720495797649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n-plt.xlim(-1.5, 2.2)\n+plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n"
                },
                {
                    "date": 1720495812577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n-arrowprops = dict(facecolor='black', shrink=0.05, width=0.005, headwidth=8)\n+arrowprops = dict(facecolor='black', shrink=0.5, width=0.005, headwidth=8)\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n"
                },
                {
                    "date": 1720495820546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n-arrowprops = dict(facecolor='black', shrink=0.5, width=0.005, headwidth=8)\n+arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 设置轴范围\n"
                },
                {
                    "date": 1720495929673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n x = np.linspace(-2, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n-plt.figure(figsize=(10, 6))\n+plt.figure(figsize=(10, 10))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n"
                },
                {
                    "date": 1720495943839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n x = np.linspace(-2, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n-plt.figure(figsize=(10, 10))\n+plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n"
                },
                {
                    "date": 1720495959254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n x = np.linspace(-2, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n-plt.figure(figsize=(10, 5))\n+plt.figure(figsize=(5，5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n"
                },
                {
                    "date": 1720495969671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n x = np.linspace(-2, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n-plt.figure(figsize=(5，5))\n+plt.figure(figsize=(5, 10))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n"
                },
                {
                    "date": 1720495978026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+# 定义分段函数\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-2, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# 绘图\n+plt.figure(figsize=(10, 10))\n+plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n+\n+# 设置刻度值\n+plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n+plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n+\n+# 使用 gca 函数获取 axes 对象\n+ax = plt.gca()\n+ax.spines['right'].set_color('none')  # 右侧边隐藏\n+ax.spines['top'].set_color('none')\n+ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+ax.spines['left'].set_position(('data', 0))\n+\n+# 调整坐标轴箭头\n+arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n+plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n+plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n+\n+# 设置轴范围\n+plt.xlim(-1.5, 2.5)\n+plt.ylim(-0.5, 1.5)\n+\n+# plt.title('Piecewise Linear Function')\n+# plt.legend()\n+plt.show()\n+# endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720496029424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n x = np.linspace(-2, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n-plt.figure(figsize=(10, 10))\n+plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n@@ -102,9 +102,9 @@\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n ax.spines['top'].set_color('none')\n ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+ax.spines['bottom'].set_position(('data', 0。0))  # 将坐标置于坐标0处\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n@@ -118,127 +118,5 @@\n \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n-# endregion\n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n-\n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n-\n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n-\n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-# 定义分段函数\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# 生成数据\n-x = np.linspace(-2, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# 绘图\n-plt.figure(figsize=(5, 10))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n-\n-# 设置刻度值\n-plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n-\n-# 使用 gca 函数获取 axes 对象\n-ax = plt.gca()\n-ax.spines['right'].set_color('none')  # 右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-ax.spines['left'].set_position(('data', 0))\n-\n-# 调整坐标轴箭头\n-arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n-plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n-plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n-\n-# 设置轴范围\n-plt.xlim(-1.5, 2.5)\n-plt.ylim(-0.5, 1.5)\n-\n-# plt.title('Piecewise Linear Function')\n-# plt.legend()\n-plt.show()\n # endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720496039086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n ax.spines['top'].set_color('none')\n ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0。0))  # 将坐标置于坐标0处\n+ax.spines['bottom'].set_position(('data', 000))  # 将坐标置于坐标0处\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n"
                },
                {
                    "date": 1720496051949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n ax.spines['top'].set_color('none')\n ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 000))  # 将坐标置于坐标0处\n+ax.spines['bottom'].set_position(('data', 0.0))  # 将坐标置于坐标0处\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n"
                },
                {
                    "date": 1720496073987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,17 +102,21 @@\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n ax.spines['top'].set_color('none')\n ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0.0))  # 将坐标置于坐标0处\n+ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', 0))\n \n # 调整坐标轴箭头\n arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n+\n+# 在 y=1 处添加虚线\n+plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n+\n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n \n"
                },
                {
                    "date": 1720499009210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,8 +111,13 @@\n arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n+# 移动刻度值0\n+for label in ax.get_xticklabels() + ax.get_yticklabels():\n+    if label.get_text() == '0':\n+        label.set_x(0.05)\n+        label.set_y(-0.05)\n \n # 在 y=1 处添加虚线\n plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n \n"
                },
                {
                    "date": 1720499023242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n # 移动刻度值0\n for label in ax.get_xticklabels() + ax.get_yticklabels():\n     if label.get_text() == '0':\n         label.set_x(0.05)\n-        label.set_y(-0.05)\n+        label.set_y(-0.1)\n \n # 在 y=1 处添加虚线\n plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n \n"
                },
                {
                    "date": 1720499040223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n \n # 移动刻度值0\n for label in ax.get_xticklabels() + ax.get_yticklabels():\n     if label.get_text() == '0':\n-        label.set_x(0.05)\n+        label.set_x(0.5)\n         label.set_y(-0.1)\n \n # 在 y=1 处添加虚线\n plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n"
                },
                {
                    "date": 1720499105469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import numpy as np\n import matplotlib.pyplot as plt\n import mpl_toolkits.axisartist as axisartist\n+from matplotlib.transforms import ScaledTranslation\n \n # region \n # # Define the piecewise function\n # def piecewise_function(x, t_eq, t_diff):\n@@ -115,9 +116,9 @@\n # 移动刻度值0\n for label in ax.get_xticklabels() + ax.get_yticklabels():\n     if label.get_text() == '0':\n         label.set_x(0.5)\n-        label.set_y(-0.1)\n+        label.set_y(-0.5)\n \n # 在 y=1 处添加虚线\n plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n \n"
                },
                {
                    "date": 1720499116100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,13 +113,16 @@\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 移动刻度值0\n+dx = 0.05 / ax.figure.dpi\n+dy = 0.05 / ax.figure.dpi\n+\n for label in ax.get_xticklabels() + ax.get_yticklabels():\n     if label.get_text() == '0':\n-        label.set_x(0.5)\n-        label.set_y(-0.5)\n+        label.set_transform(label.get_transform() + ScaledTranslation(dx, dy, ax.figure.dpi_scale_trans))\n \n+\n # 在 y=1 处添加虚线\n plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n \n # 设置轴范围\n"
                },
                {
                    "date": 1720499135815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,10 +113,10 @@\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 移动刻度值0\n-dx = 0.05 / ax.figure.dpi\n-dy = 0.05 / ax.figure.dpi\n+dx = 0.5 / ax.figure.dpi\n+dy = 0.5 / ax.figure.dpi\n \n for label in ax.get_xticklabels() + ax.get_yticklabels():\n     if label.get_text() == '0':\n         label.set_transform(label.get_transform() + ScaledTranslation(dx, dy, ax.figure.dpi_scale_trans))\n"
                },
                {
                    "date": 1720499143591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n # 移动刻度值0\n dx = 0.5 / ax.figure.dpi\n-dy = 0.5 / ax.figure.dpi\n+dy = 0.1 / ax.figure.dpi\n \n for label in ax.get_xticklabels() + ax.get_yticklabels():\n     if label.get_text() == '0':\n         label.set_transform(label.get_transform() + ScaledTranslation(dx, dy, ax.figure.dpi_scale_trans))\n"
                },
                {
                    "date": 1720499197606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,14 +115,15 @@\n \n # 移动刻度值0\n dx = 0.5 / ax.figure.dpi\n dy = 0.1 / ax.figure.dpi\n-\n+# 移动刻度值0\n for label in ax.get_xticklabels() + ax.get_yticklabels():\n     if label.get_text() == '0':\n-        label.set_transform(label.get_transform() + ScaledTranslation(dx, dy, ax.figure.dpi_scale_trans))\n+        label.set_position((label.get_position()[0], label.get_position()[1] - 0.15))\n \n \n+\n # 在 y=1 处添加虚线\n plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n \n # 设置轴范围\n"
                },
                {
                    "date": 1720499217400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,15 +112,13 @@\n arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n+\n # 移动刻度值0\n-dx = 0.5 / ax.figure.dpi\n-dy = 0.1 / ax.figure.dpi\n-# 移动刻度值0\n for label in ax.get_xticklabels() + ax.get_yticklabels():\n     if label.get_text() == '0':\n-        label.set_position((label.get_position()[0], label.get_position()[1] - 0.15))\n+        label.set_position((label.get_position()[0], label.get_position()[1] - 0.5))\n \n \n \n # 在 y=1 处添加虚线\n"
                },
                {
                    "date": 1720499501324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n # 设置刻度值\n-plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n+plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2], ha='right')\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n"
                },
                {
                    "date": 1720499515900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,9 @@\n # 绘图\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n+plt\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2], ha='right')\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n"
                },
                {
                    "date": 1720499521542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n # 绘图\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n-plt\n+plt.xlabel()\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2], ha='right')\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n"
                },
                {
                    "date": 1720499529274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n # 绘图\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n-plt.xlabel()\n+plt.xlabel(r\"$x$\")\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2], ha='right')\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n"
                },
                {
                    "date": 1720499535204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,9 @@\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n plt.xlabel(r\"$x$\")\n+plt.ylabel(r\"\")\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2], ha='right')\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n"
                },
                {
                    "date": 1720499540558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n plt.xlabel(r\"$x$\")\n-plt.ylabel(r\"\")\n+plt.ylabel(r\"$y$\")\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2], ha='right')\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n"
                },
                {
                    "date": 1720499615172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n \n plt.xlabel(r\"$x$\")\n plt.ylabel(r\"$y$\")\n # 设置刻度值\n-plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2], ha='right')\n+plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2], loc='right')\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n"
                },
                {
                    "date": 1720499628199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n \n plt.xlabel(r\"$x$\")\n plt.ylabel(r\"$y$\")\n # 设置刻度值\n-plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2], loc='right')\n+plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n"
                },
                {
                    "date": 1720499645154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,10 +94,10 @@\n # 绘图\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n-plt.xlabel(r\"$x$\")\n-plt.ylabel(r\"$y$\")\n+plt.xlabel(r\"$x$\", loc='right')\n+plt.ylabel(r\"$y$\", loc='')\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n"
                },
                {
                    "date": 1720499667180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,10 +94,10 @@\n # 绘图\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n-plt.xlabel(r\"$x$\", loc='right')\n-plt.ylabel(r\"$y$\", loc='')\n+plt.xlabel(r\"$x$\", loc='right', labelpad)\n+plt.ylabel(r\"$y$\", loc='top')\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n"
                },
                {
                    "date": 1720499672846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n # 绘图\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n-plt.xlabel(r\"$x$\", loc='right', labelpad)\n+plt.xlabel(r\"$x$\", loc='right', labelpad = 0.5)\n plt.ylabel(r\"$y$\", loc='top')\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n"
                },
                {
                    "date": 1720499685977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,10 +94,10 @@\n # 绘图\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n-plt.xlabel(r\"$x$\", loc='right', labelpad = 0.5)\n-plt.ylabel(r\"$y$\", loc='top')\n+plt.xlabel(r\"$x$\", loc='right', labelpad = 0.3)\n+plt.ylabel(r\"$y$\", loc='top', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n"
                },
                {
                    "date": 1720499710553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n plt.xlabel(r\"$x$\", loc='right', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='top', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n-plt.yticks([-1, 0, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n+plt.yticks([-1, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n"
                },
                {
                    "date": 1720499754268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n plt.xlabel(r\"$x$\", loc='right', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='top', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n-plt.yticks([-1, 1], [-1, 0, 1])  # 不显示刻度2，只显示到-1\n+plt.yticks([-1, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n \n # 使用 gca 函数获取 axes 对象\n ax = plt.gca()\n ax.spines['right'].set_color('none')  # 右侧边隐藏\n@@ -128,9 +128,9 @@\n \n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n-\n+plt.axisbelow(True) \n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n # endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720499770997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n \n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n-plt.axisbelow(True) \n+\n # plt.title('Piecewise Linear Function')\n # plt.legend()\n plt.show()\n # endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720499872267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n ax.spines['top'].set_color('none')\n ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-ax.spines['left'].set_position(('data', 0))\n+ax.spines['left'].set_position(('data', -0.2))\n \n # 调整坐标轴箭头\n arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n"
                },
                {
                    "date": 1720499891460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n \n # 调整坐标轴箭头\n arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n-plt.annotate('', xy=(0, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n+plt.annotate('', xy=(-0.2, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n \n \n # 移动刻度值0\n for label in ax.get_xticklabels() + ax.get_yticklabels():\n"
                },
                {
                    "date": 1720499904844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n \n # 调整坐标轴箭头\n arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n-plt.annotate('', xy=(-0.2, 1.5), xytext=(0, -0.5), arrowprops=arrowprops)\n+plt.annotate('', xy=(-0.2, 1.5), xytext=(-0.2, -0.5), arrowprops=arrowprops)\n \n \n # 移动刻度值0\n for label in ax.get_xticklabels() + ax.get_yticklabels():\n"
                },
                {
                    "date": 1720499960773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,12 +109,12 @@\n ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n ax.spines['left'].set_position(('data', -0.2))\n \n-# 调整坐标轴箭头\n-arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n-plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n-plt.annotate('', xy=(-0.2, 1.5), xytext=(-0.2, -0.5), arrowprops=arrowprops)\n+# # 调整坐标轴箭头\n+# arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n+# plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n+# plt.annotate('', xy=(-0.2, 1.5), xytext=(-0.2, -0.5), arrowprops=arrowprops)\n \n \n # 移动刻度值0\n for label in ax.get_xticklabels() + ax.get_yticklabels():\n"
                },
                {
                    "date": 1720500010002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n ax.spines['top'].set_color('none')\n ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-ax.spines['left'].set_position(('data', -0.2))\n+# ax.spines['left'].set_position(('data', -0.2))\n \n # # 调整坐标轴箭头\n # arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n # plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n"
                },
                {
                    "date": 1720500078243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,14 +101,14 @@\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n \n # 使用 gca 函数获取 axes 对象\n-ax = plt.gca()\n-ax.spines['right'].set_color('none')  # 右侧边隐藏\n-ax.spines['top'].set_color('none')\n-ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+# ax = plt.gca()\n+# ax.spines['right'].set_color('none')  # 右侧边隐藏\n+# ax.spines['top'].set_color('none')\n+# ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+# ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+# ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n # ax.spines['left'].set_position(('data', -0.2))\n \n # # 调整坐标轴箭头\n # arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n"
                },
                {
                    "date": 1720500103011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,17 +116,17 @@\n # plt.annotate('', xy=(-0.2, 1.5), xytext=(-0.2, -0.5), arrowprops=arrowprops)\n \n \n # 移动刻度值0\n-for label in ax.get_xticklabels() + ax.get_yticklabels():\n-    if label.get_text() == '0':\n-        label.set_position((label.get_position()[0], label.get_position()[1] - 0.5))\n+# for label in ax.get_xticklabels() + ax.get_yticklabels():\n+#     if label.get_text() == '0':\n+#         label.set_position((label.get_position()[0], label.get_position()[1] - 0.5))\n \n \n \n # 在 y=1 处添加虚线\n plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n-\n+plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n \n"
                },
                {
                    "date": 1720500121890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n # 绘图\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n-plt.xlabel(r\"$x$\", loc='right', labelpad = 0.3)\n+plt.xlabel(r\"$x$\", loc='', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='top', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n@@ -124,9 +124,9 @@\n \n \n # 在 y=1 处添加虚线\n plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n-plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n+plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n \n"
                },
                {
                    "date": 1720500129821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,10 +94,10 @@\n # 绘图\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n-plt.xlabel(r\"$x$\", loc='', labelpad = 0.3)\n-plt.ylabel(r\"$y$\", loc='top', labelpad = 0.3)\n+plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n+plt.ylabel(r\"$y$\", loc='', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n \n"
                },
                {
                    "date": 1720500198664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n \n plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n-plt.ylabel(r\"$y$\", loc='', labelpad = 0.3)\n+plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n \n@@ -122,9 +122,9 @@\n #         label.set_position((label.get_position()[0], label.get_position()[1] - 0.5))\n \n \n \n-# 在 y=1 处添加虚线\n+#添加虚线\n plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n"
                },
                {
                    "date": 1720500207235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,19 @@\n # 设置刻度值\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n \n+#添加虚线\n+plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n+plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n+# 设置轴范围\n+plt.xlim(-1.5, 2.5)\n+plt.ylim(-0.5, 1.5)\n+\n+# plt.title('Piecewise Linear Function')\n+# plt.legend()\n+plt.show()\n+\n # 使用 gca 函数获取 axes 对象\n # ax = plt.gca()\n # ax.spines['right'].set_color('none')  # 右侧边隐藏\n # ax.spines['top'].set_color('none')\n@@ -120,17 +131,5 @@\n # for label in ax.get_xticklabels() + ax.get_yticklabels():\n #     if label.get_text() == '0':\n #         label.set_position((label.get_position()[0], label.get_position()[1] - 0.5))\n \n-\n-\n-#添加虚线\n-plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n-plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n-# 设置轴范围\n-plt.xlim(-1.5, 2.5)\n-plt.ylim(-0.5, 1.5)\n-\n-# plt.title('Piecewise Linear Function')\n-# plt.legend()\n-plt.show()\n # endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720500214578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n \n # plt.title('Piecewise Linear Function')\n-# plt.legend()\n+plt.legend()\n plt.show()\n \n # 使用 gca 函数获取 axes 对象\n # ax = plt.gca()\n"
                },
                {
                    "date": 1720500221670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 5))\n-plt.plot(x, y, label='Piecewise Linear Function', color='blue', linewidth=2.5)  # 增加线条粗细\n+plt.plot(x, y, label='Linear Si', color='blue', linewidth=2.5)  # 增加线条粗细\n \n plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n # 设置刻度值\n"
                },
                {
                    "date": 1720500227250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+from matplotlib.transforms import ScaledTranslation\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+# 定义分段函数\n+def piecewise_linear_function(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-2, 2, 400)\n+y = np.array([piecewise_linear_function(xi) for xi in x])\n+\n+# 绘图\n+plt.figure(figsize=(10, 5))\n+plt.plot(x, y, label='Linear Sigmoid', color='blue', linewidth=2.5)  # 增加线条粗细\n+\n+plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n+plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n+# 设置刻度值\n+plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n+plt.yticks([-1, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n+\n+#添加虚线\n+plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n+plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n+# 设置轴范围\n+plt.xlim(-1.5, 2.5)\n+plt.ylim(-0.5, 1.5)\n+\n+# plt.title('Piecewise Linear Function')\n+plt.legend()\n+plt.show()\n+\n+# 使用 gca 函数获取 axes 对象\n+# ax = plt.gca()\n+# ax.spines['right'].set_color('none')  # 右侧边隐藏\n+# ax.spines['top'].set_color('none')\n+# ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+# ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+# ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+# ax.spines['left'].set_position(('data', -0.2))\n+\n+# # 调整坐标轴箭头\n+# arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n+# plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n+# plt.annotate('', xy=(-0.2, 1.5), xytext=(-0.2, -0.5), arrowprops=arrowprops)\n+\n+\n+# 移动刻度值0\n+# for label in ax.get_xticklabels() + ax.get_yticklabels():\n+#     if label.get_text() == '0':\n+#         label.set_position((label.get_position()[0], label.get_position()[1] - 0.5))\n+\n+# endregion\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720500234171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,142 +103,8 @@\n \n #添加虚线\n plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n-# 设置轴范围\n-plt.xlim(-1.5, 2.5)\n-plt.ylim(-0.5, 1.5)\n-\n-# plt.title('Piecewise Linear Function')\n-plt.legend()\n-plt.show()\n-\n-# 使用 gca 函数获取 axes 对象\n-# ax = plt.gca()\n-# ax.spines['right'].set_color('none')  # 右侧边隐藏\n-# ax.spines['top'].set_color('none')\n-# ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n-# ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n-# ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n-# ax.spines['left'].set_position(('data', -0.2))\n-\n-# # 调整坐标轴箭头\n-# arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n-# plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n-# plt.annotate('', xy=(-0.2, 1.5), xytext=(-0.2, -0.5), arrowprops=arrowprops)\n-\n-\n-# 移动刻度值0\n-# for label in ax.get_xticklabels() + ax.get_yticklabels():\n-#     if label.get_text() == '0':\n-#         label.set_position((label.get_position()[0], label.get_position()[1] - 0.5))\n-\n-# endregion\n-import numpy as np\n-import matplotlib.pyplot as plt\n-import mpl_toolkits.axisartist as axisartist\n-from matplotlib.transforms import ScaledTranslation\n-\n-# region \n-# # Define the piecewise function\n-# def piecewise_function(x, t_eq, t_diff):\n-#     if x < t_eq:\n-#         return 0\n-#     elif x > t_diff:\n-#         return 1\n-#     else:\n-#         return (x - t_eq) / (t_diff - t_eq)\n-\n-# # Parameters\n-# t_eq = 2\n-# t_diff = 5\n-\n-# # Create x values\n-# x_values = np.linspace(0, 7, 400)\n-# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n-\n-# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n-# fig = plt.figure()\n-# #使用axisartist.Subplot方法创建一个绘图区对象ax\n-# ax = axisartist.Subplot(fig, 111)\n-# #将绘图区对象添加到画布中\n-# fig.add_axes(ax)\n-# # fig, ax = plt.subplots(figsize=(10, 6))\n-# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n-# ax.axvline(t_eq, color='red', linestyle='--')\n-# ax.axvline(t_diff, color='blue', linestyle='--')\n-# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n-# # ax.hlines(0, -0.1, 7.5, colors='black')\n-\n-# # Annotate the axes\n-# ax.set_xticks([t_eq, t_diff])\n-# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n-# ax.set_yticks([0, 1])\n-# # ax.set_yticklabels(['0', '1'])\n-\n-# # Remove the top and right spines\n-# # ax.spines['top'].set_visible(False)\n-# # ax.spines['right'].set_visible(False)\n-# # ax.spines['left'].set_position('zero')\n-# # ax.spines['bottom'].set_position('zero')\n-# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n-# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n-# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n-# ax.axis[\"top\"].set_visible(False)\n-# ax.axis[\"right\"].set_visible(False)\n-\n-# ax.set_xlabel(r'$d$', fontsize=12)\n-# ax.set_ylabel(r'$diff$', fontsize=12)\n-\n-# # Drawing axis arrows by extending spines\n-# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n-# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n-# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n-\n-# # # Adding axis labels\n-# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n-\n-# # Add parameter names\n-# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n-# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n-# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n-# # ax.legend()\n-# ax.grid(True)\n-\n-# plt.show()\n-\n-# endregion\n-\n-\n-\n-# region \n-# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n-# 定义分段函数\n-def piecewise_linear_function(x):\n-    if x < 0:\n-        return 0\n-    elif x > 1:\n-        return 1\n-    else:\n-        return x\n-\n-# 生成数据\n-x = np.linspace(-2, 2, 400)\n-y = np.array([piecewise_linear_function(xi) for xi in x])\n-\n-# 绘图\n-plt.figure(figsize=(10, 5))\n-plt.plot(x, y, label='Linear Si', color='blue', linewidth=2.5)  # 增加线条粗细\n-\n-plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n-plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n-# 设置刻度值\n-plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n-plt.yticks([-1, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n-\n-#添加虚线\n-plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n"
                },
                {
                    "date": 1720500245634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n \n #添加虚线\n plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n-plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n+plt.ay(0, color='gray', linestyle='--', linewidth=1)\n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n \n"
                },
                {
                    "date": 1720500252045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n \n #添加虚线\n plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n-plt.ay(0, color='gray', linestyle='--', linewidth=1)\n+plt.axvline()(0, color='gray', linestyle='--', linewidth=1)\n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n \n"
                },
                {
                    "date": 1720500326537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,11 +101,11 @@\n plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n \n #添加虚线\n-plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n-plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n-plt.axvline()(0, color='gray', linestyle='--', linewidth=1)\n+# plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n+# plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n+# plt.axvline(1, color='gray', linestyle='--', linewidth=1)\n # 设置轴范围\n plt.xlim(-1.5, 2.5)\n plt.ylim(-0.5, 1.5)\n \n"
                },
                {
                    "date": 1720500347159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     else:\n         return x\n \n # 生成数据\n-x = np.linspace(-2, 2, 400)\n+x = np.linspace(-3, 2, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 5))\n"
                },
                {
                    "date": 1720500352819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     else:\n         return x\n \n # 生成数据\n-x = np.linspace(-3, 2, 400)\n+x = np.linspace(-3, 3, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n # 绘图\n plt.figure(figsize=(10, 5))\n@@ -97,9 +97,9 @@\n \n plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n # 设置刻度值\n-plt.xticks([-1, 0, 1, 2], [ -1, 0, 1, 2])\n+plt.xticks([-2, -1, 0, 1, 2], [ -1, 0, 1, 2])\n plt.yticks([-1, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n \n #添加虚线\n # plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n"
                },
                {
                    "date": 1720500363894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,10 +97,10 @@\n \n plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n # 设置刻度值\n-plt.xticks([-2, -1, 0, 1, 2], [ -1, 0, 1, 2])\n-plt.yticks([-1, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n+plt.xticks([-2, -1, 0, 1, 2], [ -2, -1, 0, 1, 2])\n+plt.yticks([-0.6, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n \n #添加虚线\n # plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n # plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n"
                },
                {
                    "date": 1720500374328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,17 +98,17 @@\n plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [ -2, -1, 0, 1, 2])\n-plt.yticks([-0.6, 1], [-1, 1])  # 不显示刻度2，只显示到-1\n+plt.yticks([-0.6, 1], [-0.6, 1])  # 不显示刻度2，只显示到-1\n \n #添加虚线\n # plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n # plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n # plt.axvline(1, color='gray', linestyle='--', linewidth=1)\n # 设置轴范围\n-plt.xlim(-1.5, 2.5)\n-plt.ylim(-0.5, 1.5)\n+# plt.xlim(-1.5, 2.5)\n+# plt.ylim(-0.5, 1.5)\n \n # plt.title('Piecewise Linear Function')\n plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720500392073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [ -2, -1, 0, 1, 2])\n-plt.yticks([-0.6, 1], [-0.6, 1])  # 不显示刻度2，只显示到-1\n+plt.yticks([-0.6, 1.3], [-0.6, 1])  # 不显示刻度2，只显示到-1\n \n #添加虚线\n # plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n # plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n"
                },
                {
                    "date": 1720500397178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [ -2, -1, 0, 1, 2])\n-plt.yticks([-0.6, 1.3], [-0.6, 1])  # 不显示刻度2，只显示到-1\n+plt.yticks([-0.3, 1.3], [-0.6, 1.3])  # 不显示刻度2，只显示到-1\n \n #添加虚线\n # plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n # plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n"
                },
                {
                    "date": 1720500425481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [ -2, -1, 0, 1, 2])\n-plt.yticks([-0.3, 1.3], [-0.6, 1.3])  # 不显示刻度2，只显示到-1\n+plt.yticks([-0.2, 1.3], [-0.3, 1.3])  # 不显示刻度2，只显示到-1\n \n #添加虚线\n # plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n # plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n"
                },
                {
                    "date": 1720500445098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [ -2, -1, 0, 1, 2])\n-plt.yticks([-0.2, 1.3], [-0.3, 1.3])  # 不显示刻度2，只显示到-1\n+plt.yticks([-0.2, 1], [-0.2, 1.3])  # 不显示刻度2，只显示到-1\n \n #添加虚线\n # plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n # plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n"
                },
                {
                    "date": 1720500453267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [ -2, -1, 0, 1, 2])\n-plt.yticks([-0.2, 1], [-0.2, 1.3])  # 不显示刻度2，只显示到-1\n+plt.yticks([-0.2, 1], [-0.2, 1])  # 不显示刻度2，只显示到-1\n \n #添加虚线\n # plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n # plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n"
                },
                {
                    "date": 1720500459909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n # 设置刻度值\n plt.xticks([-2, -1, 0, 1, 2], [ -2, -1, 0, 1, 2])\n-plt.yticks([-0.2, 1], [-0.2, 1])  # 不显示刻度2，只显示到-1\n+plt.yticks([0, 1], [0, 1])  # 不显示刻度2，只显示到-1\n \n #添加虚线\n # plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n # plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n"
                },
                {
                    "date": 1720500469935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,10 +105,10 @@\n # plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n # plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n # plt.axvline(1, color='gray', linestyle='--', linewidth=1)\n # 设置轴范围\n-# plt.xlim(-1.5, 2.5)\n-# plt.ylim(-0.5, 1.5)\n+plt.xlim(-1.5, 2.5)\n+plt.ylim(-0.5, 1.5)\n \n # plt.title('Piecewise Linear Function')\n plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720500485715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,10 +105,10 @@\n # plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n # plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n # plt.axvline(1, color='gray', linestyle='--', linewidth=1)\n # 设置轴范围\n-plt.xlim(-1.5, 2.5)\n-plt.ylim(-0.5, 1.5)\n+# plt.xlim(-1.5, 2.5)\n+# plt.ylim(-0.5, 1.5)\n \n # plt.title('Piecewise Linear Function')\n plt.legend()\n plt.show()\n"
                },
                {
                    "date": 1720500517982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,8 +90,14 @@\n # 生成数据\n x = np.linspace(-3, 3, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n+\n+\n+\n+\n+\n+\n # 绘图\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Linear Sigmoid', color='blue', linewidth=2.5)  # 增加线条粗细\n \n"
                },
                {
                    "date": 1720500530634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n \n # region \n # x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n # 定义分段函数\n-def piecewise_linear_function(x):\n+def linear(x):\n     if x < 0:\n         return 0\n     elif x > 1:\n         return 1\n@@ -91,13 +91,28 @@\n x = np.linspace(-3, 3, 400)\n y = np.array([piecewise_linear_function(xi) for xi in x])\n \n \n+# Define the piecewise function\n+def piecewise_function(x, t_eq, t_diff):\n+    if x < t_eq:\n+        return 0\n+    elif x > t_diff:\n+        return 1\n+    else:\n+        return (x - t_eq) / (t_diff - t_eq)\n \n+# Parameters\n+t_eq = 2\n+t_diff = 5\n \n+# Create x values\n+x_values = np.linspace(0, 7, 400)\n+y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n \n \n \n+\n # 绘图\n plt.figure(figsize=(10, 5))\n plt.plot(x, y, label='Linear Sigmoid', color='blue', linewidth=2.5)  # 增加线条粗细\n \n"
                },
                {
                    "date": 1720500535691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n \n # region \n # x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n # 定义分段函数\n-def linear(x):\n+def linear_sigmod(x):\n     if x < 0:\n         return 0\n     elif x > 1:\n         return 1\n"
                },
                {
                    "date": 1720500543604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n y = np.array([linear_sigmod(xi) for xi in x])\n \n \n # Define the piecewise function\n-def ramo-(x, t_eq, t_diff):\n+def ramo(x, t_eq, t_diff):\n     if x < t_eq:\n         return 0\n     elif x > t_diff:\n         return 1\n"
                },
                {
                    "date": 1720500559963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mpl_toolkits.axisartist as axisartist\n+from matplotlib.transforms import ScaledTranslation\n+\n+# region \n+# # Define the piecewise function\n+# def piecewise_function(x, t_eq, t_diff):\n+#     if x < t_eq:\n+#         return 0\n+#     elif x > t_diff:\n+#         return 1\n+#     else:\n+#         return (x - t_eq) / (t_diff - t_eq)\n+\n+# # Parameters\n+# t_eq = 2\n+# t_diff = 5\n+\n+# # Create x values\n+# x_values = np.linspace(0, 7, 400)\n+# y_values = np.array([piecewise_function(x, t_eq, t_diff) for x in x_values])\n+\n+# # Plot the function with axis arrows and specific annotations, ensuring arrows on both axes and adjusting line lengths\n+# fig = plt.figure()\n+# #使用axisartist.Subplot方法创建一个绘图区对象ax\n+# ax = axisartist.Subplot(fig, 111)\n+# #将绘图区对象添加到画布中\n+# fig.add_axes(ax)\n+# # fig, ax = plt.subplots(figsize=(10, 6))\n+# ax.plot(x_values, y_values, label='Piecewise Function', color = 'black', linewidth=2)  # Increase line thickness\n+# ax.axvline(t_eq, color='red', linestyle='--')\n+# ax.axvline(t_diff, color='blue', linestyle='--')\n+# # ax.hlines(1, -0.1, 7.5, colors='green', linestyle='--')\n+# # ax.hlines(0, -0.1, 7.5, colors='black')\n+\n+# # Annotate the axes\n+# ax.set_xticks([t_eq, t_diff])\n+# ax.set_xticklabels(['$t_{eq}$', '$t_{diff}$'])\n+# ax.set_yticks([0, 1])\n+# # ax.set_yticklabels(['0', '1'])\n+\n+# # Remove the top and right spines\n+# # ax.spines['top'].set_visible(False)\n+# # ax.spines['right'].set_visible(False)\n+# # ax.spines['left'].set_position('zero')\n+# # ax.spines['bottom'].set_position('zero')\n+# ax.axis[\"bottom\"].set_axisline_style(\"-|>\", size = 1.5)\n+# ax.axis[\"left\"].set_axisline_style(\"-|>\", size = 1.5)\n+# #通过set_visible方法设置绘图区的顶部及右侧坐标轴隐藏\n+# ax.axis[\"top\"].set_visible(False)\n+# ax.axis[\"right\"].set_visible(False)\n+\n+# ax.set_xlabel(r'$d$', fontsize=12)\n+# ax.set_ylabel(r'$diff$', fontsize=12)\n+\n+# # Drawing axis arrows by extending spines\n+# # arrow_fmt = dict(markersize=6, color='black', linewidth=2)\n+# # ax.plot(1, 0, \">k\", transform=ax.get_yaxis_transform(), clip_on=False, **arrow_fmt)\n+# # ax.plot(0, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False, **arrow_fmt)\n+\n+# # # Adding axis labels\n+# # ax.text(7.6, -0.05, 'x', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.1, 1.25, 'y', ha='center', va='center', fontsize=12, color='black')\n+\n+# # Add parameter names\n+# # ax.text(3.5, -0.1, 'd', ha='center', va='center', fontsize=12, color='black')\n+# # ax.text(-0.3, 0.5, 'diff', ha='center', va='center', fontsize=12, color='black')\n+# # ax.set_title('Piecewise Function Plot with Axis Annotations and Arrows')\n+# # ax.legend()\n+# ax.grid(True)\n+\n+# plt.show()\n+\n+# endregion\n+\n+\n+\n+# region \n+# x<0, y=0; x>1, y=1; x\\in [0,1], y=x\n+# 定义分段函数\n+def linear_sigmod(x):\n+    if x < 0:\n+        return 0\n+    elif x > 1:\n+        return 1\n+    else:\n+        return x\n+\n+# 生成数据\n+x = np.linspace(-3, 3, 400)\n+y = np.array([linear_sigmod(xi) for xi in x])\n+\n+\n+# Define the piecewise function\n+def ramp_function(x, t_eq, t_diff):\n+    if x < t_eq:\n+        return 0\n+    elif x > t_diff:\n+        return 1\n+    else:\n+        return (x - t_eq) / (t_diff - t_eq)\n+\n+# Parameters\n+t_eq = 2\n+t_diff = 5\n+\n+# Create x values\n+x_values = np.linspace(-3, 3, 400)\n+y_values = np.array([ramp_function(x, t_eq, t_diff) for x in x_values])\n+\n+\n+\n+\n+# 绘图\n+plt.figure(figsize=(10, 5))\n+plt.plot(x, y, label='Linear Sigmoid', color='blue', linewidth=2.5)  # 增加线条粗细\n+\n+plt.xlabel(r\"$x$\", loc='center', labelpad = 0.3)\n+plt.ylabel(r\"$y$\", loc='center', labelpad = 0.3)\n+# 设置刻度值\n+plt.xticks([-2, -1, 0, 1, 2], [ -2, -1, 0, 1, 2])\n+plt.yticks([0, 1], [0, 1])  # 不显示刻度2，只显示到-1\n+\n+#添加虚线\n+# plt.axhline(1, color='gray', linestyle='--', linewidth=1)\n+# plt.axhline(0, color='gray', linestyle='--', linewidth=1)\n+# plt.axvline(1, color='gray', linestyle='--', linewidth=1)\n+# 设置轴范围\n+# plt.xlim(-1.5, 2.5)\n+# plt.ylim(-0.5, 1.5)\n+\n+# plt.title('Piecewise Linear Function')\n+plt.legend()\n+plt.show()\n+\n+# 使用 gca 函数获取 axes 对象\n+# ax = plt.gca()\n+# ax.spines['right'].set_color('none')  # 右侧边隐藏\n+# ax.spines['top'].set_color('none')\n+# ax.xaxis.set_ticks_position('bottom')  # 将底边设为横坐标\n+# ax.spines['bottom'].set_position(('data', 0))  # 将坐标置于坐标0处\n+# ax.yaxis.set_ticks_position('left')  # 左边设置为纵坐标\n+# ax.spines['left'].set_position(('data', -0.2))\n+\n+# # 调整坐标轴箭头\n+# arrowprops = dict(facecolor='black', shrink=0.0005, width=0.005, headwidth=8)\n+# plt.annotate('', xy=(2.5, 0), xytext=(-0.5, 0), arrowprops=arrowprops)\n+# plt.annotate('', xy=(-0.2, 1.5), xytext=(-0.2, -0.5), arrowprops=arrowprops)\n+\n+\n+# 移动刻度值0\n+# for label in ax.get_xticklabels() + ax.get_yticklabels():\n+#     if label.get_text() == '0':\n+#         label.set_position((label.get_position()[0], label.get_position()[1] - 0.5))\n+\n+# endregion\n\\ No newline at end of file\n"
                }
            ],
            "date": 1720341558122,
            "name": "Commit-0",
            "content": "# Plot the function with annotated points\nplt.figure(figsize=(10, 6))\nplt.plot(x_values, y_values, label='Piecewise Function')\nplt.axvline(t_eq, color='red', linestyle='--', label=f'$t_{{eq}} = {t_eq}$')\nplt.axvline(t_diff, color='blue', linestyle='--', label=f'$t_{{diff}} = {t_diff}$')\nplt.axhline(1, color='green', linestyle='--', label='$y = 1$')\n\n# Annotate the points\nplt.annotate(f'$t_{{eq}} = {t_eq}$', xy=(t_eq, 0), xytext=(t_eq, 0.3),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='right', verticalalignment='top')\nplt.annotate(f'$t_{{diff}} = {t_diff}$', xy=(t_diff, 1), xytext=(t_diff, 0.7),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='right', verticalalignment='top')\nplt.annotate('$y = 1$', xy=(0, 1), xytext=(0.5, 1.05),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='right', verticalalignment='top')\n\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Piecewise Function Plot with Annotations')\nplt.legend()\nplt.grid(True)\nplt.show()\n"
        }
    ]
}