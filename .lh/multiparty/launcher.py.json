{
    "sourceFile": "multiparty/launcher.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1718524851473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718524893251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     logging.basicConfig(\n         level=level,\n         format=\"%(asctime)s - %(process)d - %(name)s - %(levelname)s - %(message)s\",\n     )\n-    from v2Mr import v2Mr\n+    from test import v2Mr\n \n     v2Mr(\n         args.number, \n         args.ratio\n"
                },
                {
                    "date": 1718613953604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,15 +21,8 @@\n     default=2,\n     help=\"The number of parties to launch. Each party acts as its own process\",\n )\n parser.add_argument(\n-    \"--number\",\n-    default=10,\n-    type=int,\n-    metavar=\"N\",\n-    help=\"number of features\",\n-)\n-parser.add_argument(\n     \"--ratio\",\n     default=0.2,\n     type=float,\n     metavar=\"k_N_ratio\",\n@@ -51,11 +44,11 @@\n     logging.basicConfig(\n         level=level,\n         format=\"%(asctime)s - %(process)d - %(name)s - %(levelname)s - %(message)s\",\n     )\n-    from test import v2Mr\n+    from test import test\n \n-    v2Mr(\n+    test(\n         args.number, \n         args.ratio\n     )\n \n"
                },
                {
                    "date": 1718613979563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,15 +21,8 @@\n     default=2,\n     help=\"The number of parties to launch. Each party acts as its own process\",\n )\n parser.add_argument(\n-    \"--ratio\",\n-    default=0.2,\n-    type=float,\n-    metavar=\"k_N_ratio\",\n-    help=\"ratio\",\n-)\n-parser.add_argument(\n     \"--multiprocess\",\n     default=False,\n     action=\"store_true\",\n     help=\"Run example in multiprocess mode\",\n@@ -47,9 +40,9 @@\n     )\n     from test import test\n \n     test(\n-        args.number, \n+        args.rpoch, \n         args.ratio\n     )\n \n \n"
                },
                {
                    "date": 1718613985151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,10 @@\n     )\n     from test import test\n \n     test(\n-        args.rpoch, \n-        args.ratio\n+        args.epoch, \n+        args.lr\n     )\n \n \n def main(run_experiment):\n"
                },
                {
                    "date": 1718614090252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n-# File: launcher.py\n-# Time: 2024/ 03/ 29 23: 39: 20\n-# Desc : 独热矩阵提取\n+\n \"\"\"\n To run mpc_linear_svm example in multiprocess mode:\n \n $ python3 examples/mpc_linear_svm/launcher.py --multiprocess\n"
                },
                {
                    "date": 1718614099175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n-\n+# File: launcher.py\n+# Time: 2024/ 06/ 17 16: 48: 12\n+# Desc : SVM训练\n \"\"\"\n To run mpc_linear_svm example in multiprocess mode:\n \n $ python3 examples/mpc_linear_svm/launcher.py --multiprocess\n"
                },
                {
                    "date": 1718614456960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,20 @@\n     default=False,\n     action=\"store_true\",\n     help=\"Run example in multiprocess mode\",\n )\n+parser.add_argument(\n+    \"--epoch\", \n+    default=50, \n+    type=int, \n+    help=\"epoch\"\n+)\n+parser.add_argument(\n+    \"--lr\", \n+    default=0.5, \n+    type=float, \n+    help=\"learning rate\"\n+)\n \n \n def _run_experiment(args):\n     level = logging.INFO\n"
                },
                {
                    "date": 1718614510815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,73 @@\n+# File: launcher.py\n+# Time: 2024/ 06/ 17 16: 48: 12\n+# Desc : SVM训练\n+\"\"\"\n+To run mpc_linear_svm example in multiprocess mode:\n+\n+$ python3 examples/mpc_linear_svm/launcher.py --multiprocess\n+\"\"\"\n+\n+import argparse\n+import logging\n+import os\n+\n+from examples.multiprocess_launcher import MultiProcessLauncher\n+\n+\n+parser = argparse.ArgumentParser(description=\"feature selection based on one-hot matrix\")\n+parser.add_argument(\n+    \"--world_size\",\n+    type=int,\n+    default=2,\n+    help=\"The number of parties to launch. Each party acts as its own process\",\n+)\n+parser.add_argument(\n+    \"--multiprocess\",\n+    default=False,\n+    action=\"store_true\",\n+    help=\"Run example in multiprocess mode\",\n+)\n+parser.add_argument(\n+    \"--epoch\", \n+    default=50, \n+    type=int, \n+    help=\"epoch\"\n+)\n+parser.add_argument(\n+    \"--lr\", \n+    default=0.5, \n+    type=float, \n+    help=\"learning rate\"\n+)\n+\n+\n+def _run_experiment(args):\n+    level = logging.INFO\n+    if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n+        level = logging.CRITICAL\n+    logging.getLogger().setLevel(level)\n+    logging.basicConfig(\n+        level=level,\n+        format=\"%(asctime)s - %(process)d - %(name)s - %(levelname)s - %(message)s\",\n+    )\n+    from test import run_mpc_linear_svm\n+\n+    test(\n+        args.epoch, \n+        args.lr\n+    )\n+\n+\n+def main(run_experiment):\n+    args = parser.parse_args()\n+    if args.multiprocess:\n+        launcher = MultiProcessLauncher(args.world_size, run_experiment, args)\n+        launcher.start()\n+        launcher.join()\n+        launcher.terminate()\n+    else:\n+        run_experiment(args)\n+\n+\n+if __name__ == \"__main__\":\n+    main(_run_experiment)\n"
                },
                {
                    "date": 1718639640633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,73 @@\n+# File: launcher.py\n+# Time: 2024/ 06/ 17 16: 48: 12\n+# Desc : SVM训练\n+\"\"\"\n+To run mpc_linear_svm example in multiprocess mode:\n+\n+$ python3 examples/mpc_linear_svm/launcher.py --multiprocess\n+\"\"\"\n+\n+import argparse\n+import logging\n+import os\n+\n+from examples.multiprocess_launcher import MultiProcessLauncher\n+\n+\n+parser = argparse.ArgumentParser(description=\"feature selection based on one-hot matrix\")\n+parser.add_argument(\n+    \"--world_size\",\n+    type=int,\n+    default=2,\n+    help=\"The number of parties to launch. Each party acts as its own process\",\n+)\n+parser.add_argument(\n+    \"--multiprocess\",\n+    default=False,\n+    action=\"store_true\",\n+    help=\"Run example in multiprocess mode\",\n+)\n+parser.add_argument(\n+    \"--epoch\", \n+    default=100, \n+    type=int, \n+    help=\"epoch\"\n+)\n+parser.add_argument(\n+    \"--lr\", \n+    default=0.5, \n+    type=float, \n+    help=\"learning rate\"\n+)\n+\n+\n+def _run_experiment(args):\n+    level = logging.INFO\n+    if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n+        level = logging.CRITICAL\n+    logging.getLogger().setLevel(level)\n+    logging.basicConfig(\n+        level=level,\n+        format=\"%(asctime)s - %(process)d - %(name)s - %(levelname)s - %(message)s\",\n+    )\n+    from test import run_mpc_linear_svm\n+\n+    run_mpc_linear_svm(\n+        args.epoch, \n+        args.lr\n+    )\n+\n+\n+def main(run_experiment):\n+    args = parser.parse_args()\n+    if args.multiprocess:\n+        launcher = MultiProcessLauncher(args.world_size, run_experiment, args)\n+        launcher.start()\n+        launcher.join()\n+        launcher.terminate()\n+    else:\n+        run_experiment(args)\n+\n+\n+if __name__ == \"__main__\":\n+    main(_run_experiment)\n"
                }
            ],
            "date": 1718524851473,
            "name": "Commit-0",
            "content": "# File: launcher.py\n# Time: 2024/ 03/ 29 23: 39: 20\n# Desc : 独热矩阵提取\n\"\"\"\nTo run mpc_linear_svm example in multiprocess mode:\n\n$ python3 examples/mpc_linear_svm/launcher.py --multiprocess\n\"\"\"\n\nimport argparse\nimport logging\nimport os\n\nfrom examples.multiprocess_launcher import MultiProcessLauncher\n\n\nparser = argparse.ArgumentParser(description=\"feature selection based on one-hot matrix\")\nparser.add_argument(\n    \"--world_size\",\n    type=int,\n    default=2,\n    help=\"The number of parties to launch. Each party acts as its own process\",\n)\nparser.add_argument(\n    \"--number\",\n    default=10,\n    type=int,\n    metavar=\"N\",\n    help=\"number of features\",\n)\nparser.add_argument(\n    \"--ratio\",\n    default=0.2,\n    type=float,\n    metavar=\"k_N_ratio\",\n    help=\"ratio\",\n)\nparser.add_argument(\n    \"--multiprocess\",\n    default=False,\n    action=\"store_true\",\n    help=\"Run example in multiprocess mode\",\n)\n\n\ndef _run_experiment(args):\n    level = logging.INFO\n    if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n        level = logging.CRITICAL\n    logging.getLogger().setLevel(level)\n    logging.basicConfig(\n        level=level,\n        format=\"%(asctime)s - %(process)d - %(name)s - %(levelname)s - %(message)s\",\n    )\n    from v2Mr import v2Mr\n\n    v2Mr(\n        args.number, \n        args.ratio\n    )\n\n\ndef main(run_experiment):\n    args = parser.parse_args()\n    if args.multiprocess:\n        launcher = MultiProcessLauncher(args.world_size, run_experiment, args)\n        launcher.start()\n        launcher.join()\n        launcher.terminate()\n    else:\n        run_experiment(args)\n\n\nif __name__ == \"__main__\":\n    main(_run_experiment)\n"
        }
    ]
}