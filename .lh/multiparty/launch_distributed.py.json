{
    "sourceFile": "multiparty/launch_distributed.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1718524840459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718527596452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n \n \n def _run_experiment(args):\n     # only import here to initialize crypten within the subprocesses\n-    from v2Mr import v2Mr\n+    from test import v2Mr\n     # Only Rank 0 will display logs.\n     level = logging.INFO\n     #if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n     #    level = logging.CRITICAL\n"
                },
                {
                    "date": 1718527601581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,15 +72,15 @@\n \n \n def _run_experiment(args):\n     # only import here to initialize crypten within the subprocesses\n-    from test import v2Mr\n+    from test import test\n     # Only Rank 0 will display logs.\n     level = logging.INFO\n     #if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n     #    level = logging.CRITICAL\n     logging.getLogger().setLevel(level)\n-    v2Mr(\n+    test(\n         args.number,\n         args.ratio\n     )\n \n"
                },
                {
                    "date": 1718614000398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n     #if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n     #    level = logging.CRITICAL\n     logging.getLogger().setLevel(level)\n     test(\n-        args.number,\n+        args.epoch,\n         args.ratio\n     )\n \n \n"
                },
                {
                    "date": 1718614013111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+\n+# Copyright (c) Facebook, Inc. and its affiliates.\n+#\n+# This source code is licensed under the MIT license found in the\n+# LICENSE file in the root directory of this source tree.\n+\n+\"\"\"\n+# rank 0\n+python launch_distributed.py \\\n+    --world_size 2 \\\n+    --rank 0 \\\n+    --master_address 127.0.0.1 \\\n+    --master_port 12345 \\\n+    --distributed\n+\"\"\"\n+\n+import argparse\n+import logging\n+import os\n+\n+from distributed_launcher import DistributedLauncher\n+\n+\n+\n+parser = argparse.ArgumentParser(description=\"V2Mr algorithm\")\n+parser.add_argument(\n+    \"--world_size\",\n+    type=int,\n+    default=2,\n+    help=\"The number of parties to launch. Each party acts as its own process\",\n+)\n+parser.add_argument(\n+    \"--rank\",\n+    type=int,\n+    help=\"The rank of the current party. Each party acts as its own process\",\n+)\n+parser.add_argument(\n+    \"--master_address\",\n+    type=str,\n+    help=\"master IP Address\",\n+)\n+parser.add_argument(\n+    \"--master_port\",\n+    type=int,\n+    help=\"master port\",\n+)\n+parser.add_argument(\n+    \"--backend\",\n+    type=str,\n+    default=\"gloo\",\n+    help=\"backend for torhc.distributed, 'NCCL' or 'gloo'.\",\n+)\n+parser.add_argument(\n+    \"--distributed\",\n+    default=True,\n+    action=\"store_true\",\n+    help=\"Run example in distributed mode\",\n+)\n+parser.add_argument(\n+    \"--number\",\n+    type=int,\n+    default=10,\n+    help=\"Total instances\",\n+)\n+parser.add_argument(\n+    \"--ls\", \n+    default=0.2, \n+    type=float, \n+    help=\"ratio\"\n+)\n+\n+\n+def _run_experiment(args):\n+    # only import here to initialize crypten within the subprocesses\n+    from test import test\n+    # Only Rank 0 will display logs.\n+    level = logging.INFO\n+    #if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n+    #    level = logging.CRITICAL\n+    logging.getLogger().setLevel(level)\n+    test(\n+        args.epoch,\n+        args.lr\n+    )\n+\n+\n+def main(run_experiment):\n+    args = parser.parse_args()\n+    if args.distributed:\n+        launcher = DistributedLauncher(args.world_size, args.rank, args.master_address, args.master_port, args.backend, run_experiment, args)\n+        launcher.start()\n+        #launcher.join()\n+        #launcher.terminate()\n+    else:\n+        run_experiment(args)\n+\n+\n+if __name__ == \"__main__\":\n+    main(_run_experiment)\n"
                },
                {
                    "date": 1718614023340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,16 +57,10 @@\n     action=\"store_true\",\n     help=\"Run example in distributed mode\",\n )\n parser.add_argument(\n-    \"--number\",\n-    type=int,\n-    default=10,\n-    help=\"Total instances\",\n-)\n-parser.add_argument(\n-    \"--ls\", \n-    default=0.2, \n+    \"--lr\", \n+    default=0.5, \n     type=float, \n     help=\"ratio\"\n )\n \n@@ -97,104 +91,4 @@\n \n \n if __name__ == \"__main__\":\n     main(_run_experiment)\n-#!/usr/bin/env python3\n-\n-# Copyright (c) Facebook, Inc. and its affiliates.\n-#\n-# This source code is licensed under the MIT license found in the\n-# LICENSE file in the root directory of this source tree.\n-\n-\"\"\"\n-# rank 0\n-python launch_distributed.py \\\n-    --world_size 2 \\\n-    --rank 0 \\\n-    --master_address 127.0.0.1 \\\n-    --master_port 12345 \\\n-    --distributed\n-\"\"\"\n-\n-import argparse\n-import logging\n-import os\n-\n-from distributed_launcher import DistributedLauncher\n-\n-\n-\n-parser = argparse.ArgumentParser(description=\"V2Mr algorithm\")\n-parser.add_argument(\n-    \"--world_size\",\n-    type=int,\n-    default=2,\n-    help=\"The number of parties to launch. Each party acts as its own process\",\n-)\n-parser.add_argument(\n-    \"--rank\",\n-    type=int,\n-    help=\"The rank of the current party. Each party acts as its own process\",\n-)\n-parser.add_argument(\n-    \"--master_address\",\n-    type=str,\n-    help=\"master IP Address\",\n-)\n-parser.add_argument(\n-    \"--master_port\",\n-    type=int,\n-    help=\"master port\",\n-)\n-parser.add_argument(\n-    \"--backend\",\n-    type=str,\n-    default=\"gloo\",\n-    help=\"backend for torhc.distributed, 'NCCL' or 'gloo'.\",\n-)\n-parser.add_argument(\n-    \"--distributed\",\n-    default=True,\n-    action=\"store_true\",\n-    help=\"Run example in distributed mode\",\n-)\n-parser.add_argument(\n-    \"--number\",\n-    type=int,\n-    default=10,\n-    help=\"Total instances\",\n-)\n-parser.add_argument(\n-    \"--ratio\", \n-    default=0.2, \n-    type=float, \n-    help=\"ratio\"\n-)\n-\n-\n-def _run_experiment(args):\n-    # only import here to initialize crypten within the subprocesses\n-    from test import test\n-    # Only Rank 0 will display logs.\n-    level = logging.INFO\n-    #if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n-    #    level = logging.CRITICAL\n-    logging.getLogger().setLevel(level)\n-    test(\n-        args.epoch,\n-        args.ratio\n-    )\n-\n-\n-def main(run_experiment):\n-    args = parser.parse_args()\n-    if args.distributed:\n-        launcher = DistributedLauncher(args.world_size, args.rank, args.master_address, args.master_port, args.backend, run_experiment, args)\n-        launcher.start()\n-        #launcher.join()\n-        #launcher.terminate()\n-    else:\n-        run_experiment(args)\n-\n-\n-if __name__ == \"__main__\":\n-    main(_run_experiment)\n"
                },
                {
                    "date": 1718614038244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n parser.add_argument(\n     \"--lr\", \n     default=0.5, \n     type=float, \n-    help=\"ratio\"\n+    help=\"learning \"\n )\n \n \n def _run_experiment(args):\n"
                },
                {
                    "date": 1718614049595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,16 @@\n parser.add_argument(\n     \"--lr\", \n     default=0.5, \n     type=float, \n-    help=\"learning \"\n+    help=\"learning rate\"\n )\n+parser.add_argument(\n+    \"--lr\", \n+    default=0.5, \n+    type=float, \n+    help=\"learning rate\"\n+)\n \n \n def _run_experiment(args):\n     # only import here to initialize crypten within the subprocesses\n"
                },
                {
                    "date": 1718614058278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,12 +57,12 @@\n     action=\"store_true\",\n     help=\"Run example in distributed mode\",\n )\n parser.add_argument(\n-    \"--lr\", \n-    default=0.5, \n+    \"--epoch\", \n+    default=50, \n     type=float, \n-    help=\"learning rate\"\n+    help=\"epoch\"\n )\n parser.add_argument(\n     \"--lr\", \n     default=0.5, \n"
                },
                {
                    "date": 1718614103867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+\n+\"\"\"\n+# rank 0\n+python launch_distributed.py \\\n+    --world_size 2 \\\n+    --rank 0 \\\n+    --master_address 127.0.0.1 \\\n+    --master_port 12345 \\\n+    --distributed\n+\"\"\"\n+\n+import argparse\n+import logging\n+import os\n+\n+from distributed_launcher import DistributedLauncher\n+\n+\n+\n+parser = argparse.ArgumentParser(description=\"V2Mr algorithm\")\n+parser.add_argument(\n+    \"--world_size\",\n+    type=int,\n+    default=2,\n+    help=\"The number of parties to launch. Each party acts as its own process\",\n+)\n+parser.add_argument(\n+    \"--rank\",\n+    type=int,\n+    help=\"The rank of the current party. Each party acts as its own process\",\n+)\n+parser.add_argument(\n+    \"--master_address\",\n+    type=str,\n+    help=\"master IP Address\",\n+)\n+parser.add_argument(\n+    \"--master_port\",\n+    type=int,\n+    help=\"master port\",\n+)\n+parser.add_argument(\n+    \"--backend\",\n+    type=str,\n+    default=\"gloo\",\n+    help=\"backend for torhc.distributed, 'NCCL' or 'gloo'.\",\n+)\n+parser.add_argument(\n+    \"--distributed\",\n+    default=True,\n+    action=\"store_true\",\n+    help=\"Run example in distributed mode\",\n+)\n+parser.add_argument(\n+    \"--epoch\", \n+    default=50, \n+    type=int, \n+    help=\"epoch\"\n+)\n+parser.add_argument(\n+    \"--lr\", \n+    default=0.5, \n+    type=float, \n+    help=\"learning rate\"\n+)\n+\n+\n+def _run_experiment(args):\n+    # only import here to initialize crypten within the subprocesses\n+    from test import test\n+    # Only Rank 0 will display logs.\n+    level = logging.INFO\n+    #if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n+    #    level = logging.CRITICAL\n+    logging.getLogger().setLevel(level)\n+    test(\n+        args.epoch,\n+        args.lr\n+    )\n+\n+\n+def main(run_experiment):\n+    args = parser.parse_args()\n+    if args.distributed:\n+        launcher = DistributedLauncher(args.world_size, args.rank, args.master_address, args.master_port, args.backend, run_experiment, args)\n+        launcher.start()\n+        #launcher.join()\n+        #launcher.terminate()\n+    else:\n+        run_experiment(args)\n+\n+\n+if __name__ == \"__main__\":\n+    main(_run_experiment)\n"
                },
                {
                    "date": 1718614116693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,9 @@\n \n from distributed_launcher import DistributedLauncher\n \n \n-\n-parser = argparse.ArgumentParser(description=\"V2Mr algorithm\")\n+SVMV2Mr algorithm\")\n parser.add_argument(\n     \"--world_size\",\n     type=int,\n     default=2,\n@@ -91,104 +90,4 @@\n \n \n if __name__ == \"__main__\":\n     main(_run_experiment)\n-#!/usr/bin/env python3\n-\n-# Copyright (c) Facebook, Inc. and its affiliates.\n-#\n-# This source code is licensed under the MIT license found in the\n-# LICENSE file in the root directory of this source tree.\n-\n-\"\"\"\n-# rank 0\n-python launch_distributed.py \\\n-    --world_size 2 \\\n-    --rank 0 \\\n-    --master_address 127.0.0.1 \\\n-    --master_port 12345 \\\n-    --distributed\n-\"\"\"\n-\n-import argparse\n-import logging\n-import os\n-\n-from distributed_launcher import DistributedLauncher\n-\n-\n-\n-parser = argparse.ArgumentParser(description=\"V2Mr algorithm\")\n-parser.add_argument(\n-    \"--world_size\",\n-    type=int,\n-    default=2,\n-    help=\"The number of parties to launch. Each party acts as its own process\",\n-)\n-parser.add_argument(\n-    \"--rank\",\n-    type=int,\n-    help=\"The rank of the current party. Each party acts as its own process\",\n-)\n-parser.add_argument(\n-    \"--master_address\",\n-    type=str,\n-    help=\"master IP Address\",\n-)\n-parser.add_argument(\n-    \"--master_port\",\n-    type=int,\n-    help=\"master port\",\n-)\n-parser.add_argument(\n-    \"--backend\",\n-    type=str,\n-    default=\"gloo\",\n-    help=\"backend for torhc.distributed, 'NCCL' or 'gloo'.\",\n-)\n-parser.add_argument(\n-    \"--distributed\",\n-    default=True,\n-    action=\"store_true\",\n-    help=\"Run example in distributed mode\",\n-)\n-parser.add_argument(\n-    \"--epoch\", \n-    default=50, \n-    type=float, \n-    help=\"epoch\"\n-)\n-parser.add_argument(\n-    \"--lr\", \n-    default=0.5, \n-    type=float, \n-    help=\"learning rate\"\n-)\n-\n-\n-def _run_experiment(args):\n-    # only import here to initialize crypten within the subprocesses\n-    from test import test\n-    # Only Rank 0 will display logs.\n-    level = logging.INFO\n-    #if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n-    #    level = logging.CRITICAL\n-    logging.getLogger().setLevel(level)\n-    test(\n-        args.epoch,\n-        args.lr\n-    )\n-\n-\n-def main(run_experiment):\n-    args = parser.parse_args()\n-    if args.distributed:\n-        launcher = DistributedLauncher(args.world_size, args.rank, args.master_address, args.master_port, args.backend, run_experiment, args)\n-        launcher.start()\n-        #launcher.join()\n-        #launcher.terminate()\n-    else:\n-        run_experiment(args)\n-\n-\n-if __name__ == \"__main__\":\n-    main(_run_experiment)\n"
                },
                {
                    "date": 1718614125997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+\n+\"\"\"\n+# rank 0\n+python launch_distributed.py \\\n+    --world_size 2 \\\n+    --rank 0 \\\n+    --master_address 127.0.0.1 \\\n+    --master_port 12345 \\\n+    --distributed\n+\"\"\"\n+\n+import argparse\n+import logging\n+import os\n+\n+from distributed_launcher import DistributedLauncher\n+\n+\n+\n+parser = argparse.ArgumentParser(description=\"SVMtrain\")\n+parser.add_argument(\n+    \"--world_size\",\n+    type=int,\n+    default=2,\n+    help=\"The number of parties to launch. Each party acts as its own process\",\n+)\n+parser.add_argument(\n+    \"--rank\",\n+    type=int,\n+    help=\"The rank of the current party. Each party acts as its own process\",\n+)\n+parser.add_argument(\n+    \"--master_address\",\n+    type=str,\n+    help=\"master IP Address\",\n+)\n+parser.add_argument(\n+    \"--master_port\",\n+    type=int,\n+    help=\"master port\",\n+)\n+parser.add_argument(\n+    \"--backend\",\n+    type=str,\n+    default=\"gloo\",\n+    help=\"backend for torhc.distributed, 'NCCL' or 'gloo'.\",\n+)\n+parser.add_argument(\n+    \"--distributed\",\n+    default=True,\n+    action=\"store_true\",\n+    help=\"Run example in distributed mode\",\n+)\n+parser.add_argument(\n+    \"--epoch\", \n+    default=50, \n+    type=int, \n+    help=\"epoch\"\n+)\n+parser.add_argument(\n+    \"--lr\", \n+    default=0.5, \n+    type=float, \n+    help=\"learning rate\"\n+)\n+\n+\n+def _run_experiment(args):\n+    # only import here to initialize crypten within the subprocesses\n+    from test import test\n+    # Only Rank 0 will display logs.\n+    level = logging.INFO\n+    #if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n+    #    level = logging.CRITICAL\n+    logging.getLogger().setLevel(level)\n+    test(\n+        args.epoch,\n+        args.lr\n+    )\n+\n+\n+def main(run_experiment):\n+    args = parser.parse_args()\n+    if args.distributed:\n+        launcher = DistributedLauncher(args.world_size, args.rank, args.master_address, args.master_port, args.backend, run_experiment, args)\n+        launcher.start()\n+        #launcher.join()\n+        #launcher.terminate()\n+    else:\n+        run_experiment(args)\n+\n+\n+if __name__ == \"__main__\":\n+    main(_run_experiment)\n"
                },
                {
                    "date": 1718614534342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n from distributed_launcher import DistributedLauncher\n \n \n \n-parser = argparse.ArgumentParser(description=\"SVMtrain\")\n+parser = argparse.ArgumentParser(description=\"SVM_train\")\n parser.add_argument(\n     \"--world_size\",\n     type=int,\n     default=2,\n@@ -66,9 +66,9 @@\n \n \n def _run_experiment(args):\n     # only import here to initialize crypten within the subprocesses\n-    from test import test\n+    from test import run_mpc_linear_svm\n     # Only Rank 0 will display logs.\n     level = logging.INFO\n     #if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n     #    level = logging.CRITICAL\n@@ -91,97 +91,4 @@\n \n \n if __name__ == \"__main__\":\n     main(_run_experiment)\n-\n-\"\"\"\n-# rank 0\n-python launch_distributed.py \\\n-    --world_size 2 \\\n-    --rank 0 \\\n-    --master_address 127.0.0.1 \\\n-    --master_port 12345 \\\n-    --distributed\n-\"\"\"\n-\n-import argparse\n-import logging\n-import os\n-\n-from distributed_launcher import DistributedLauncher\n-\n-\n-SVMV2Mr algorithm\")\n-parser.add_argument(\n-    \"--world_size\",\n-    type=int,\n-    default=2,\n-    help=\"The number of parties to launch. Each party acts as its own process\",\n-)\n-parser.add_argument(\n-    \"--rank\",\n-    type=int,\n-    help=\"The rank of the current party. Each party acts as its own process\",\n-)\n-parser.add_argument(\n-    \"--master_address\",\n-    type=str,\n-    help=\"master IP Address\",\n-)\n-parser.add_argument(\n-    \"--master_port\",\n-    type=int,\n-    help=\"master port\",\n-)\n-parser.add_argument(\n-    \"--backend\",\n-    type=str,\n-    default=\"gloo\",\n-    help=\"backend for torhc.distributed, 'NCCL' or 'gloo'.\",\n-)\n-parser.add_argument(\n-    \"--distributed\",\n-    default=True,\n-    action=\"store_true\",\n-    help=\"Run example in distributed mode\",\n-)\n-parser.add_argument(\n-    \"--epoch\", \n-    default=50, \n-    type=int, \n-    help=\"epoch\"\n-)\n-parser.add_argument(\n-    \"--lr\", \n-    default=0.5, \n-    type=float, \n-    help=\"learning rate\"\n-)\n-\n-\n-def _run_experiment(args):\n-    # only import here to initialize crypten within the subprocesses\n-    from test import test\n-    # Only Rank 0 will display logs.\n-    level = logging.INFO\n-    #if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n-    #    level = logging.CRITICAL\n-    logging.getLogger().setLevel(level)\n-    test(\n-        args.epoch,\n-        args.lr\n-    )\n-\n-\n-def main(run_experiment):\n-    args = parser.parse_args()\n-    if args.distributed:\n-        launcher = DistributedLauncher(args.world_size, args.rank, args.master_address, args.master_port, args.backend, run_experiment, args)\n-        launcher.start()\n-        #launcher.join()\n-        #launcher.terminate()\n-    else:\n-        run_experiment(args)\n-\n-\n-if __name__ == \"__main__\":\n-    main(_run_experiment)\n"
                },
                {
                    "date": 1718638714865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     help=\"Run example in distributed mode\",\n )\n parser.add_argument(\n     \"--epoch\", \n-    default=50, \n+    default=100, \n     type=int, \n     help=\"epoch\"\n )\n parser.add_argument(\n@@ -72,9 +72,9 @@\n     level = logging.INFO\n     #if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n     #    level = logging.CRITICAL\n     logging.getLogger().setLevel(level)\n-    test(\n+    run_mpc_linear_svm(\n         args.epoch,\n         args.lr\n     )\n \n"
                },
                {
                    "date": 1718639601989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     help=\"Run example in distributed mode\",\n )\n parser.add_argument(\n     \"--epoch\", \n-    default=100, \n+    default=, \n     type=int, \n     help=\"epoch\"\n )\n parser.add_argument(\n"
                },
                {
                    "date": 1718640389615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     help=\"Run example in distributed mode\",\n )\n parser.add_argument(\n     \"--epoch\", \n-    default=, \n+    default=100, \n     type=int, \n     help=\"epoch\"\n )\n parser.add_argument(\n"
                }
            ],
            "date": 1718524840459,
            "name": "Commit-0",
            "content": "#!/usr/bin/env python3\n\n# Copyright (c) Facebook, Inc. and its affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\n\"\"\"\n# rank 0\npython launch_distributed.py \\\n    --world_size 2 \\\n    --rank 0 \\\n    --master_address 127.0.0.1 \\\n    --master_port 12345 \\\n    --distributed\n\"\"\"\n\nimport argparse\nimport logging\nimport os\n\nfrom distributed_launcher import DistributedLauncher\n\n\n\nparser = argparse.ArgumentParser(description=\"V2Mr algorithm\")\nparser.add_argument(\n    \"--world_size\",\n    type=int,\n    default=2,\n    help=\"The number of parties to launch. Each party acts as its own process\",\n)\nparser.add_argument(\n    \"--rank\",\n    type=int,\n    help=\"The rank of the current party. Each party acts as its own process\",\n)\nparser.add_argument(\n    \"--master_address\",\n    type=str,\n    help=\"master IP Address\",\n)\nparser.add_argument(\n    \"--master_port\",\n    type=int,\n    help=\"master port\",\n)\nparser.add_argument(\n    \"--backend\",\n    type=str,\n    default=\"gloo\",\n    help=\"backend for torhc.distributed, 'NCCL' or 'gloo'.\",\n)\nparser.add_argument(\n    \"--distributed\",\n    default=True,\n    action=\"store_true\",\n    help=\"Run example in distributed mode\",\n)\nparser.add_argument(\n    \"--number\",\n    type=int,\n    default=10,\n    help=\"Total instances\",\n)\nparser.add_argument(\n    \"--ratio\", \n    default=0.2, \n    type=float, \n    help=\"ratio\"\n)\n\n\ndef _run_experiment(args):\n    # only import here to initialize crypten within the subprocesses\n    from v2Mr import v2Mr\n    # Only Rank 0 will display logs.\n    level = logging.INFO\n    #if \"RANK\" in os.environ and os.environ[\"RANK\"] != \"0\":\n    #    level = logging.CRITICAL\n    logging.getLogger().setLevel(level)\n    v2Mr(\n        args.number,\n        args.ratio\n    )\n\n\ndef main(run_experiment):\n    args = parser.parse_args()\n    if args.distributed:\n        launcher = DistributedLauncher(args.world_size, args.rank, args.master_address, args.master_port, args.backend, run_experiment, args)\n        launcher.start()\n        #launcher.join()\n        #launcher.terminate()\n    else:\n        run_experiment(args)\n\n\nif __name__ == \"__main__\":\n    main(_run_experiment)\n"
        }
    ]
}